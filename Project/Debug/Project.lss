
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000cc6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080018e  0080018e  00000de8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230a  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010da  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd7  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  0000516c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dc  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000106d  00000000  00000000  00005e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	18 c4       	rjmp	.+2096   	; 0x836 <__vector_1>
   6:	00 00       	nop
   8:	81 c4       	rjmp	.+2306   	; 0x90c <__vector_2>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	a1 c4       	rjmp	.+2370   	; 0x954 <__vector_4>
  12:	00 00       	nop
  14:	b4 c4       	rjmp	.+2408   	; 0x97e <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c4       	rjmp	.+2342   	; 0x99c <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ec       	ldi	r30, 0xC6	; 198
  ac:	fc e0       	ldi	r31, 0x0C	; 12
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 38       	cpi	r26, 0x8E	; 142
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ae e8       	ldi	r26, 0x8E	; 142
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a0 3b       	cpi	r26, 0xB0	; 176
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	00 d3       	rcall	.+1536   	; 0x6d0 <main>
  d0:	f8 c5       	rjmp	.+3056   	; 0xcc2 <_exit>

000000d2 <__bad_interrupt>:
  d2:	a0 c4       	rjmp	.+2368   	; 0xa14 <__vector_default>

000000d4 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
  da:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
  dc:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	00 00       	nop

	
	do
	{

		SET_E();
  e0:	47 9a       	sbi	0x08, 7	; 8
  e2:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  e4:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  ec:	47 98       	cbi	0x08, 7	; 8
  ee:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  f0:	47 9a       	sbi	0x08, 7	; 8
  f2:	00 00       	nop
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  f4:	96 b1       	in	r25, 0x06	; 6
  f6:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  f8:	47 98       	cbi	0x08, 7	; 8
  fa:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
  fc:	88 23       	and	r24, r24
  fe:	84 f3       	brlt	.-32     	; 0xe0 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
 100:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	87 b9       	out	0x07, r24	; 7
 108:	08 95       	ret

0000010a <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 10a:	28 2f       	mov	r18, r24
 10c:	22 95       	swap	r18
 10e:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 110:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 112:	61 11       	cpse	r22, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <LCDByte+0x10>
	CLEAR_RS();
 116:	46 98       	cbi	0x08, 6	; 8
 118:	01 c0       	rjmp	.+2      	; 0x11c <LCDByte+0x12>
else
	SET_RS();
 11a:	46 9a       	sbi	0x08, 6	; 8
 11c:	00 00       	nop

_delay_us(0.500);		//tAS

SET_E();
 11e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 120:	98 b1       	in	r25, 0x08	; 8
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 126:	98 b9       	out	0x08, r25	; 8
 128:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 12a:	47 98       	cbi	0x08, 7	; 8
 12c:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 12e:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 130:	98 b1       	in	r25, 0x08	; 8
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 136:	88 b9       	out	0x08, r24	; 8
 138:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	ca cf       	rjmp	.-108    	; 0xd4 <LCDBusyLoop>
 140:	08 95       	ret

00000142 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8b e4       	ldi	r24, 0x4B	; 75
 148:	9d e1       	ldi	r25, 0x1D	; 29
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <InitLCD+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <InitLCD+0xe>
 150:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 152:	87 b1       	in	r24, 0x07	; 7
 154:	8f 60       	ori	r24, 0x0F	; 15
 156:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 158:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15a:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 15c:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 164:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 166:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 168:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 16c:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 16e:	41 9a       	sbi	0x08, 1	; 8
 170:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 172:	47 98       	cbi	0x08, 7	; 8
 174:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 176:	ae df       	rcall	.-164    	; 0xd4 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8c 2f       	mov	r24, r28
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	c5 df       	rcall	.-118    	; 0x10a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	c2 df       	rcall	.-124    	; 0x10a <LCDByte>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2 <LCDWriteString+0x18>
 196:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	b7 df       	rcall	.-146    	; 0x10a <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <LCDWriteInt+0xe>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <LCDWriteInt+0x10>
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	25 e0       	ldi	r18, 0x05	; 5
 1c6:	df 01       	movw	r26, r30
 1c8:	1d 92       	st	X+, r1
 1ca:	2a 95       	dec	r18
 1cc:	e9 f7       	brne	.-6      	; 0x1c8 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <LCDWriteInt+0x3e>
 1d2:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 1d4:	2a e0       	ldi	r18, 0x0A	; 10
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	2b d4       	rcall	.+2134   	; 0xa32 <__divmodhi4>
 1dc:	82 93       	st	-Z, r24
	val=val/10;
 1de:	86 2f       	mov	r24, r22
 1e0:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	c9 f7       	brne	.-14     	; 0x1d8 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1e6:	bf ef       	ldi	r27, 0xFF	; 255
 1e8:	eb 16       	cp	r14, r27
 1ea:	fb 06       	cpc	r15, r27
 1ec:	69 f4       	brne	.+26     	; 0x208 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	81 11       	cpse	r24, r1
 1f2:	1d c0       	rjmp	.+58     	; 0x22e <LCDWriteInt+0x86>
 1f4:	fe 01       	movw	r30, r28
 1f6:	32 96       	adiw	r30, 0x02	; 2
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	81 91       	ld	r24, Z+
 202:	88 23       	and	r24, r24
 204:	d9 f3       	breq	.-10     	; 0x1fc <LCDWriteInt+0x54>
 206:	0f c0       	rjmp	.+30     	; 0x226 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 208:	05 e0       	ldi	r16, 0x05	; 5
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	0e 19       	sub	r16, r14
 20e:	1f 09       	sbc	r17, r15
 210:	0a c0       	rjmp	.+20     	; 0x226 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 212:	f8 01       	movw	r30, r16
 214:	81 91       	ld	r24, Z+
 216:	8f 01       	movw	r16, r30
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	76 df       	rcall	.-276    	; 0x10a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 21e:	0e 15       	cp	r16, r14
 220:	1f 05       	cpc	r17, r15
 222:	b9 f7       	brne	.-18     	; 0x212 <LCDWriteInt+0x6a>
 224:	11 c0       	rjmp	.+34     	; 0x248 <LCDWriteInt+0xa0>
 226:	05 30       	cpi	r16, 0x05	; 5
 228:	11 05       	cpc	r17, r1
 22a:	1c f0       	brlt	.+6      	; 0x232 <LCDWriteInt+0x8a>
 22c:	0d c0       	rjmp	.+26     	; 0x248 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8c 0f       	add	r24, r28
 238:	9d 1f       	adc	r25, r29
 23a:	08 0f       	add	r16, r24
 23c:	19 1f       	adc	r17, r25
 23e:	7e 01       	movw	r14, r28
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	e9 0e       	add	r14, r25
 244:	f1 1c       	adc	r15, r1
 246:	e5 cf       	rjmp	.-54     	; 0x212 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 260:	88 32       	cpi	r24, 0x28	; 40
 262:	28 f4       	brcc	.+10     	; 0x26e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 264:	61 11       	cpse	r22, r1
 266:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	4e cf       	rjmp	.-356    	; 0x10a <LCDByte>
 26e:	08 95       	ret

00000270 <setup>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
 270:	fc 01       	movw	r30, r24
 272:	11 82       	std	Z+1, r1	; 0x01
 274:	10 82       	st	Z, r1
 276:	fb 01       	movw	r30, r22
 278:	11 82       	std	Z+1, r1	; 0x01
 27a:	10 82       	st	Z, r1
 27c:	08 95       	ret

0000027e <initLink>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fb d3       	rcall	.+2038   	; 0xa80 <malloc>
 28a:	99 83       	std	Y+1, r25	; 0x01
 28c:	88 83       	st	Y, r24
 28e:	fc 01       	movw	r30, r24
 290:	12 82       	std	Z+2, r1	; 0x02
 292:	11 82       	std	Z+1, r1	; 0x01
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <enqueue>:
 29a:	db 01       	movw	r26, r22
 29c:	ed 91       	ld	r30, X+
 29e:	fc 91       	ld	r31, X
 2a0:	30 97       	sbiw	r30, 0x00	; 0
 2a2:	61 f0       	breq	.+24     	; 0x2bc <enqueue+0x22>
 2a4:	da 01       	movw	r26, r20
 2a6:	8d 91       	ld	r24, X+
 2a8:	9c 91       	ld	r25, X
 2aa:	11 97       	sbiw	r26, 0x01	; 1
 2ac:	92 83       	std	Z+2, r25	; 0x02
 2ae:	81 83       	std	Z+1, r24	; 0x01
 2b0:	8d 91       	ld	r24, X+
 2b2:	9c 91       	ld	r25, X
 2b4:	fb 01       	movw	r30, r22
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
 2ba:	08 95       	ret
 2bc:	da 01       	movw	r26, r20
 2be:	2d 91       	ld	r18, X+
 2c0:	3c 91       	ld	r19, X
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	db 01       	movw	r26, r22
 2d0:	8d 93       	st	X+, r24
 2d2:	9c 93       	st	X, r25
 2d4:	08 95       	ret

000002d6 <dequeue>:
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	da 01       	movw	r26, r20
 2de:	8d 93       	st	X+, r24
 2e0:	9c 93       	st	X, r25
 2e2:	a0 81       	ld	r26, Z
 2e4:	b1 81       	ldd	r27, Z+1	; 0x01
 2e6:	10 97       	sbiw	r26, 0x00	; 0
 2e8:	59 f0       	breq	.+22     	; 0x300 <dequeue+0x2a>
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	8d 91       	ld	r24, X+
 2ee:	9c 91       	ld	r25, X
 2f0:	12 97       	sbiw	r26, 0x02	; 2
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
 2f6:	89 2b       	or	r24, r25
 2f8:	19 f4       	brne	.+6      	; 0x300 <dequeue+0x2a>
 2fa:	fb 01       	movw	r30, r22
 2fc:	11 82       	std	Z+1, r1	; 0x01
 2fe:	10 82       	st	Z, r1
 300:	08 95       	ret

00000302 <firstValue>:
 302:	dc 01       	movw	r26, r24
 304:	ed 91       	ld	r30, X+
 306:	fc 91       	ld	r31, X
 308:	80 81       	ld	r24, Z
 30a:	08 95       	ret

0000030c <isEmpty>:
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
 30c:	fc 01       	movw	r30, r24
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	20 81       	ld	r18, Z
 312:	31 81       	ldd	r19, Z+1	; 0x01
 314:	23 2b       	or	r18, r19
 316:	09 f0       	breq	.+2      	; 0x31a <isEmpty+0xe>
 318:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
 31a:	08 95       	ret

0000031c <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 31c:	dc 01       	movw	r26, r24
 31e:	ed 91       	ld	r30, X+
 320:	fc 91       	ld	r31, X

	while(temp != NULL){
 322:	30 97       	sbiw	r30, 0x00	; 0
 324:	49 f0       	breq	.+18     	; 0x338 <size+0x1c>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 32a:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 32c:	01 80       	ldd	r0, Z+1	; 0x01
 32e:	f2 81       	ldd	r31, Z+2	; 0x02
 330:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 332:	30 97       	sbiw	r30, 0x00	; 0
 334:	d1 f7       	brne	.-12     	; 0x32a <size+0xe>
 336:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 33c:	08 95       	ret

0000033e <setupADC>:
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 33e:	ea e7       	ldi	r30, 0x7A	; 122
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	80 68       	ori	r24, 0x80	; 128
 346:	80 83       	st	Z, r24
 348:	80 81       	ld	r24, Z
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	80 83       	st	Z, r24
 34e:	ec e7       	ldi	r30, 0x7C	; 124
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 64       	ori	r24, 0x41	; 65
 356:	80 83       	st	Z, r24
 358:	ee e7       	ldi	r30, 0x7E	; 126
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <initPWM>:
 364:	84 b5       	in	r24, 0x24	; 36
 366:	81 60       	ori	r24, 0x01	; 1
 368:	84 bd       	out	0x24, r24	; 36
 36a:	84 b5       	in	r24, 0x24	; 36
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	84 bd       	out	0x24, r24	; 36
 370:	84 b5       	in	r24, 0x24	; 36
 372:	80 68       	ori	r24, 0x80	; 128
 374:	84 bd       	out	0x24, r24	; 36
 376:	85 b5       	in	r24, 0x25	; 37
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	85 bd       	out	0x25, r24	; 37
 37c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <speedDCMotor>
 380:	87 bd       	out	0x27, r24	; 39
 382:	08 95       	ret

00000384 <hwInterrupts>:
 384:	e8 9a       	sbi	0x1d, 0	; 29
 386:	e9 e6       	ldi	r30, 0x69	; 105
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
 390:	e9 9a       	sbi	0x1d, 1	; 29
 392:	80 81       	ld	r24, Z
 394:	8c 60       	ori	r24, 0x0C	; 12
 396:	80 83       	st	Z, r24
 398:	eb 9a       	sbi	0x1d, 3	; 29
 39a:	80 81       	ld	r24, Z
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	80 83       	st	Z, r24
 3a0:	ec 9a       	sbi	0x1d, 4	; 29
 3a2:	ea e6       	ldi	r30, 0x6A	; 106
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 83       	st	Z, r24
 3ac:	08 95       	ret

000003ae <getMaterialType>:
 3ae:	8d 3a       	cpi	r24, 0xAD	; 173
 3b0:	23 e0       	ldi	r18, 0x03	; 3
 3b2:	92 07       	cpc	r25, r18
 3b4:	54 f4       	brge	.+20     	; 0x3ca <getMaterialType+0x1c>
 3b6:	8c 3b       	cpi	r24, 0xBC	; 188
 3b8:	22 e0       	ldi	r18, 0x02	; 2
 3ba:	92 07       	cpc	r25, r18
 3bc:	4c f4       	brge	.+18     	; 0x3d0 <getMaterialType+0x22>
 3be:	8f 35       	cpi	r24, 0x5F	; 95
 3c0:	91 40       	sbci	r25, 0x01	; 1
 3c2:	4c f4       	brge	.+18     	; 0x3d6 <getMaterialType+0x28>
 3c4:	82 e3       	ldi	r24, 0x32	; 50
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	08 95       	ret
 3d0:	84 e6       	ldi	r24, 0x64	; 100
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	86 e9       	ldi	r24, 0x96	; 150
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	08 95       	ret

000003dc <countSorted>:
	}
} // updateDCMotorState()

void countSorted(int materialStep){
	switch(materialStep){
 3dc:	82 33       	cpi	r24, 0x32	; 50
 3de:	91 05       	cpc	r25, r1
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	1c f4       	brge	.+6      	; 0x3ea <countSorted+0xe>
 3e4:	89 2b       	or	r24, r25
 3e6:	41 f0       	breq	.+16     	; 0x3f8 <countSorted+0x1c>
 3e8:	08 95       	ret
 3ea:	84 36       	cpi	r24, 0x64	; 100
 3ec:	91 05       	cpc	r25, r1
 3ee:	c1 f0       	breq	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f0:	86 39       	cpi	r24, 0x96	; 150
 3f2:	91 05       	cpc	r25, r1
 3f4:	f9 f0       	breq	.+62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f6:	08 95       	ret
		case BLACK:
		numBlack++;
 3f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <numBlack>
 3fc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <numBlack+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <numBlack+0x1>
 406:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <numBlack>
		break;
 40a:	08 95       	ret
		case ALUM:
		numAlum++;
 40c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <numAlum>
 410:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <numAlum+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <numAlum+0x1>
 41a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <numAlum>
		break;
 41e:	08 95       	ret
		case WHITE:
		numWhite++;
 420:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <numWhite>
 424:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <numWhite+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <numWhite+0x1>
 42e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <numWhite>
		break;
 432:	08 95       	ret
		case STEEL:
		numSteel++;
 434:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <numSteel>
 438:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <numSteel+0x1>
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <numSteel+0x1>
 442:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <numSteel>
 446:	08 95       	ret

00000448 <mTimer>:
		break;
	}
} // countSorted()

void mTimer(int count){
 448:	ac 01       	movw	r20, r24
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
	TCCR1B |= _BV(WGM12); // Set Waveform Generation mode to Clear Timer on Compare Math mode
 44a:	e1 e8       	ldi	r30, 0x81	; 129
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	90 81       	ld	r25, Z
 450:	98 60       	ori	r25, 0x08	; 8
 452:	90 83       	st	Z, r25
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
 454:	88 ee       	ldi	r24, 0xE8	; 232
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 45c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0x0000; // Set initial value of Timer Counter
 460:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 464:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
 468:	b1 9a       	sbi	0x16, 1	; 22
	}
} // countSorted()

void mTimer(int count){
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 46e:	05 c0       	rjmp	.+10     	; 0x47a <mTimer+0x32>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 470:	b1 9b       	sbis	0x16, 1	; 22
 472:	fe cf       	rjmp	.-4      	; 0x470 <mTimer+0x28>
			TIFR1 |= _BV(OCF1A); // Clear interrupt flag
 474:	b1 9a       	sbi	0x16, 1	; 22
			i++; // Continue to next cycle
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 47a:	24 17       	cp	r18, r20
 47c:	35 07       	cpc	r19, r21
 47e:	1c f4       	brge	.+6      	; 0x486 <mTimer+0x3e>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 480:	b1 9b       	sbis	0x16, 1	; 22
 482:	f6 cf       	rjmp	.-20     	; 0x470 <mTimer+0x28>
 484:	f7 cf       	rjmp	.-18     	; 0x474 <mTimer+0x2c>
 486:	08 95       	ret

00000488 <displaySorted>:
	EIMSK |= _BV(INT4);
	EICRB |= _BV(ISC41); // Falling edge interrupt

} // hwInterrupts()

void displaySorted(link **head, link **tail){
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	ec 01       	movw	r28, r24
 492:	8b 01       	movw	r16, r22
	// Displays information on LCD about sorted items, and items in the queue
	
	LCDClear();
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	38 de       	rcall	.-912    	; 0x10a <LCDByte>
	LCDHome();
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	35 de       	rcall	.-918    	; 0x10a <LCDByte>
	LCDWriteString("SRT FD PD");
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	72 de       	rcall	.-796    	; 0x18a <LCDWriteString>
	
	LCDGotoXY(0,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	da de       	rcall	.-588    	; 0x260 <LCDGotoXY>
 4ac:	64 e0       	ldi	r22, 0x04	; 4
	LCDWriteInt(itemsSorted,4); // Display number items sorted
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <itemsSorted>
 4b4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <itemsSorted+0x1>
 4b8:	77 de       	rcall	.-786    	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(4,1);
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	d0 de       	rcall	.-608    	; 0x260 <LCDGotoXY>
	LCDWriteInt(size(head, tail),3); // Display number items fully detected
 4c0:	b8 01       	movw	r22, r16
 4c2:	ce 01       	movw	r24, r28
 4c4:	2b df       	rcall	.-426    	; 0x31c <size>
 4c6:	63 e0       	ldi	r22, 0x03	; 3
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	6e de       	rcall	.-804    	; 0x1a8 <LCDWriteInt>
 4cc:	61 e0       	ldi	r22, 0x01	; 1
	
	LCDGotoXY(7,1);
 4ce:	87 e0       	ldi	r24, 0x07	; 7
 4d0:	c7 de       	rcall	.-626    	; 0x260 <LCDGotoXY>
 4d2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <flagProcessing>
	LCDWriteInt(flagProcessing,3); // Display number items partially detected. There should only ever be 1 or 0.
 4d6:	63 e0       	ldi	r22, 0x03	; 3
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	65 de       	rcall	.-822    	; 0x1a8 <LCDWriteInt>
	mTimer(2000);
 4de:	80 ed       	ldi	r24, 0xD0	; 208
 4e0:	97 e0       	ldi	r25, 0x07	; 7
 4e2:	b2 df       	rcall	.-156    	; 0x448 <mTimer>
	
	
	LCDClear();
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	10 de       	rcall	.-992    	; 0x10a <LCDByte>
	LCDHome();
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0d de       	rcall	.-998    	; 0x10a <LCDByte>
	LCDWriteString("BL AL WH ST #OB");
 4f0:	84 e1       	ldi	r24, 0x14	; 20
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	4a de       	rcall	.-876    	; 0x18a <LCDWriteString>
	
	LCDGotoXY(0,1);
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	b2 de       	rcall	.-668    	; 0x260 <LCDGotoXY>
 4fc:	63 e0       	ldi	r22, 0x03	; 3
	LCDWriteInt(numBlack,3); // Display number of black in the bin
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <numBlack>
 504:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <numBlack+0x1>
 508:	4f de       	rcall	.-866    	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(3,1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	a8 de       	rcall	.-688    	; 0x260 <LCDGotoXY>
	LCDWriteInt(numAlum,3); // Display number of aluminum in the bin
 510:	63 e0       	ldi	r22, 0x03	; 3
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <numAlum>
 518:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <numAlum+0x1>
 51c:	45 de       	rcall	.-886    	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(6,1);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	9e de       	rcall	.-708    	; 0x260 <LCDGotoXY>
	LCDWriteInt(numWhite,3); // Display number of white in the bin
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <numWhite>
 52c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <numWhite+0x1>

	LCDGotoXY(9,1);
 530:	3b de       	rcall	.-906    	; 0x1a8 <LCDWriteInt>
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	89 e0       	ldi	r24, 0x09	; 9
	LCDWriteInt(numSteel,3); // Display number of steel in the bin
 536:	94 de       	rcall	.-728    	; 0x260 <LCDGotoXY>
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <numSteel>
 540:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <numSteel+0x1>
 544:	31 de       	rcall	.-926    	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(13,1);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	8d e0       	ldi	r24, 0x0D	; 13
 54a:	8a de       	rcall	.-748    	; 0x260 <LCDGotoXY>
 54c:	b8 01       	movw	r22, r16
	LCDWriteInt(size(head,tail),3); // Indicate nothing on the belt right now
 54e:	ce 01       	movw	r24, r28
 550:	e5 de       	rcall	.-566    	; 0x31c <size>
 552:	63 e0       	ldi	r22, 0x03	; 3
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	28 de       	rcall	.-944    	; 0x1a8 <LCDWriteInt>
 558:	88 eb       	ldi	r24, 0xB8	; 184
 55a:	9b e0       	ldi	r25, 0x0B	; 11
 55c:	75 df       	rcall	.-278    	; 0x448 <mTimer>
	mTimer(3000);
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
} // displaySorted()
 566:	08 95       	ret

00000568 <rotate>:
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
		return ALUM; // Aluminum
	}
	
} // getMaterialType()

void rotate(int count, char cw /* 1 rotates cw, 0 rotates ccw */){
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
	// Stepper has 200 steps --> 0 to 199
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
 57a:	18 16       	cp	r1, r24
 57c:	19 06       	cpc	r1, r25
 57e:	0c f0       	brlt	.+2      	; 0x582 <rotate+0x1a>
 580:	5d c0       	rjmp	.+186    	; 0x63c <rotate+0xd4>
 582:	b6 2e       	mov	r11, r22
 584:	ec 01       	movw	r28, r24
 586:	c1 2c       	mov	r12, r1
 588:	d1 2c       	mov	r13, r1
		if(step>3){ // Overflow condition
			step = 0;
		}else if (step<0){ // Underflow condition
			step = 3;
 58a:	0f 2e       	mov	r0, r31
 58c:	f3 e0       	ldi	r31, 0x03	; 3
 58e:	ef 2e       	mov	r14, r31
 590:	f1 2c       	mov	r15, r1
 592:	f0 2d       	mov	r31, r0
			if(stepperPos>=200) // Cover overflow condition
				stepperPos = 0;
		} else{
			step--;
			if(stepperPos<0) // Cover underflow condition
				stepperPos = 199;
 594:	07 ec       	ldi	r16, 0xC7	; 199
 596:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
		if(step>3){ // Overflow condition
 598:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 59c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 5a0:	84 30       	cpi	r24, 0x04	; 4
 5a2:	91 05       	cpc	r25, r1
 5a4:	2c f0       	brlt	.+10     	; 0x5b0 <rotate+0x48>
			step = 0;
 5a6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <step+0x1>
 5aa:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <step>
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <rotate+0x54>
		}else if (step<0){ // Underflow condition
 5b0:	99 23       	and	r25, r25
 5b2:	24 f4       	brge	.+8      	; 0x5bc <rotate+0x54>
			step = 3;
 5b4:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <step+0x1>
 5b8:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <step>
		} // end if
		
		PORTA = step_array[step]; // Set next step for stepper motor
 5bc:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <step>
 5c0:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <step+0x1>
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ea 57       	subi	r30, 0x7A	; 122
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	80 81       	ld	r24, Z
 5ce:	82 b9       	out	0x02, r24	; 2
		if (cw){ // Advance to next step in specified direction
 5d0:	bb 20       	and	r11, r11
 5d2:	a9 f0       	breq	.+42     	; 0x5fe <rotate+0x96>
			step++;
 5d4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 5d8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <step+0x1>
 5e2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <step>
			if(stepperPos>=200) // Cover overflow condition
 5e6:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 5ea:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 5ee:	88 3c       	cpi	r24, 0xC8	; 200
 5f0:	91 05       	cpc	r25, r1
 5f2:	c4 f0       	brlt	.+48     	; 0x624 <rotate+0xbc>
				stepperPos = 0;
 5f4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 5f8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
 5fc:	13 c0       	rjmp	.+38     	; 0x624 <rotate+0xbc>
		} else{
			step--;
 5fe:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 602:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <step+0x1>
 60c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <step>
			if(stepperPos<0) // Cover underflow condition
 610:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 614:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 618:	99 23       	and	r25, r25
 61a:	24 f4       	brge	.+8      	; 0x624 <rotate+0xbc>
				stepperPos = 199;
 61c:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <stepperPos+0x1>
 620:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <stepperPos>
		}
		mTimer(stepperPauseTime); // **** TODO this may need adjusted as it could throw off timing of control loop
 624:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepperPauseTime>
 628:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepperPauseTime+0x1>
 62c:	0d df       	rcall	.-486    	; 0x448 <mTimer>
	// Stepper has 200 steps --> 0 to 199
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	c8 1a       	sub	r12, r24
 632:	d8 0a       	sbc	r13, r24
 634:	cc 15       	cp	r28, r12
 636:	dd 05       	cpc	r29, r13
 638:	09 f0       	breq	.+2      	; 0x63c <rotate+0xd4>
 63a:	ae cf       	rjmp	.-164    	; 0x598 <rotate+0x30>
				stepperPos = 199;
		}
		mTimer(stepperPauseTime); // **** TODO this may need adjusted as it could throw off timing of control loop
	} // end for
	return;
} // rotate()
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	df 90       	pop	r13
 64a:	cf 90       	pop	r12
 64c:	bf 90       	pop	r11
 64e:	08 95       	ret

00000650 <initStepperPos>:
		}
	}
} // waitToStart()

void initStepperPos(){
	LCDClear();
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	5a dd       	rcall	.-1356   	; 0x10a <LCDByte>
	LCDHome();
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	57 dd       	rcall	.-1362   	; 0x10a <LCDByte>
	LCDWriteString("Searching...");
 65c:	84 e2       	ldi	r24, 0x24	; 36
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	94 dd       	rcall	.-1240   	; 0x18a <LCDWriteString>
	// Rotates the stepper motor to find the average position between the two "edges" of hall effect sensor data,
	//  then rotates from there to the starting position. (Black bucket)
	stepperPos = 0;
 662:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 666:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
	while((PIND>>2)&1){ // loop while not at black bucket position
 66a:	4a 9b       	sbis	0x09, 2	; 9
 66c:	06 c0       	rjmp	.+12     	; 0x67a <initStepperPos+0x2a>
		rotate(1, 1); // 1 step cw
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	79 df       	rcall	.-270    	; 0x568 <rotate>
	LCDHome();
	LCDWriteString("Searching...");
	// Rotates the stepper motor to find the average position between the two "edges" of hall effect sensor data,
	//  then rotates from there to the starting position. (Black bucket)
	stepperPos = 0;
	while((PIND>>2)&1){ // loop while not at black bucket position
 676:	4a 99       	sbic	0x09, 2	; 9
 678:	fa cf       	rjmp	.-12     	; 0x66e <initStepperPos+0x1e>
		rotate(1, 1); // 1 step cw
	}
	stepperPos = 0; // Now we are centered on the black bucket, tare the value
 67a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 67e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
	}else{
		rotate((stepperDestination - stepperPos), 1);
	}
	stepperPos = 0; // Now we are centered on the black bucket, tare the value
	*/
	LCDClear();
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	81 e0       	ldi	r24, 0x01	; 1
	LCDHome();
 686:	41 dd       	rcall	.-1406   	; 0x10a <LCDByte>
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	82 e0       	ldi	r24, 0x02	; 2
	LCDWriteString("Program Start");
 68c:	3e dd       	rcall	.-1412   	; 0x10a <LCDByte>
 68e:	81 e3       	ldi	r24, 0x31	; 49
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	7b cd       	rjmp	.-1290   	; 0x18a <LCDWriteString>
 694:	08 95       	ret

00000696 <getMaterialName>:
		} //end if
	} //end while
} // mTimer()

char* getMaterialName(int materialStep){ // temporary test function
	switch(materialStep){
 696:	82 33       	cpi	r24, 0x32	; 50
 698:	91 05       	cpc	r25, r1
 69a:	71 f0       	breq	.+28     	; 0x6b8 <getMaterialName+0x22>
 69c:	1c f4       	brge	.+6      	; 0x6a4 <getMaterialName+0xe>
 69e:	89 2b       	or	r24, r25
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <getMaterialName+0x34>
 6a2:	10 c0       	rjmp	.+32     	; 0x6c4 <getMaterialName+0x2e>
 6a4:	84 36       	cpi	r24, 0x64	; 100
 6a6:	91 05       	cpc	r25, r1
 6a8:	21 f0       	breq	.+8      	; 0x6b2 <getMaterialName+0x1c>
 6aa:	86 39       	cpi	r24, 0x96	; 150
 6ac:	91 05       	cpc	r25, r1
 6ae:	39 f0       	breq	.+14     	; 0x6be <getMaterialName+0x28>
 6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <getMaterialName+0x2e>
		case BLACK:
		return "BLACK";
		break;
		case WHITE:
		return "WHITE";
 6b2:	85 e4       	ldi	r24, 0x45	; 69
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	08 95       	ret
		break;
		case ALUM:
		return "ALUM";
 6b8:	8b e4       	ldi	r24, 0x4B	; 75
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	08 95       	ret
		break;
		case STEEL:
		return "STEEL";
 6be:	80 e5       	ldi	r24, 0x50	; 80
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	08 95       	ret
		break;
	}
	return "";
 6c4:	80 e6       	ldi	r24, 0x60	; 96
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	08 95       	ret
} // mTimer()

char* getMaterialName(int materialStep){ // temporary test function
	switch(materialStep){
		case BLACK:
		return "BLACK";
 6ca:	8f e3       	ldi	r24, 0x3F	; 63
 6cc:	91 e0       	ldi	r25, 0x01	; 1
		case STEEL:
		return "STEEL";
		break;
	}
	return "";
}
 6ce:	08 95       	ret

000006d0 <main>:
//test functions
char* getMaterialName(int materialStep);

// MAIN PROGRAM
int main(int argc, char *argv[])
{
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	00 d0       	rcall	.+0      	; 0x6da <main+0xa>
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
	setup(&head, &tail); // Set up queue
 6de:	64 ea       	ldi	r22, 0xA4	; 164
 6e0:	71 e0       	ldi	r23, 0x01	; 1
 6e2:	86 ea       	ldi	r24, 0xA6	; 166
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	c4 dd       	rcall	.-1144   	; 0x270 <setup>
	
	cli();	// Disables all interrupts
 6e8:	f8 94       	cli
	TCCR1B |= _BV(CS10); // mTimer setup
 6ea:	e1 e8       	ldi	r30, 0x81	; 129
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	81 60       	ori	r24, 0x01	; 1
 6f2:	80 83       	st	Z, r24
	
	DDRA = 0xFF; // Stepper motor driver pins
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; // DC motor driver pins
 6f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; // Output LEDs & LCD display
 6fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; // Button inputs and EX, OR, HE
 6fc:	1a b8       	out	0x0a, r1	; 10
	DDRF = 0x00; // Sensor input pin (RL on F1) 
 6fe:	10 ba       	out	0x10, r1	; 16
	
	InitLCD(0); // Initialize LCD
 700:	80 e0       	ldi	r24, 0x00	; 0
	initStepperPos(); // Initialize stepper position
 702:	1f dd       	rcall	.-1474   	; 0x142 <InitLCD>
 704:	a5 df       	rcall	.-182    	; 0x650 <initStepperPos>
	initPWM(); // Set up DC motor PWM
 706:	2e de       	rcall	.-932    	; 0x364 <initPWM>
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	85 b9       	out	0x05, r24	; 5
	
	InitLCD(0); // Initialize LCD
	initStepperPos(); // Initialize stepper position
	initPWM(); // Set up DC motor PWM
	updateDCMotorState(1); // Turn on DC motor
	setupADC(); // Set up reflectivity sensor
 70c:	18 de       	rcall	.-976    	; 0x33e <setupADC>
 70e:	3a de       	rcall	.-908    	; 0x384 <hwInterrupts>
	hwInterrupts(); // Set up hardware interrupts
 710:	78 94       	sei
 712:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <flagProcessing>
	{
		
		// If object has left optical sensor, it's time to identify the material
		// Check - were we just processing a material?
		// Check OR==low? (optical sensor #1) (Pin D1)
		if (flagProcessing && ((PIND & 0x02)==0x00)){
 716:	88 23       	and	r24, r24
 718:	59 f1       	breq	.+86     	; 0x770 <main+0xa0>
 71a:	49 99       	sbic	0x09, 1	; 9
 71c:	29 c0       	rjmp	.+82     	; 0x770 <main+0xa0>
 71e:	ce 01       	movw	r24, r28
			// Take optimal value from the ADC values, identify material, and add to FIFO
			link *newLink;
			initLink(&newLink);
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	ad dd       	rcall	.-1190   	; 0x27e <initLink>
 724:	09 81       	ldd	r16, Y+1	; 0x01
			newLink->e.value = getMaterialType(ADC_result);
 726:	1a 81       	ldd	r17, Y+2	; 0x02
 728:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 72c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 730:	3e de       	rcall	.-900    	; 0x3ae <getMaterialType>
 732:	f8 01       	movw	r30, r16
 734:	80 83       	st	Z, r24
 736:	ae 01       	movw	r20, r28
			enqueue(&head,&tail,&newLink); // Add item to FIFO
 738:	4f 5f       	subi	r20, 0xFF	; 255
 73a:	5f 4f       	sbci	r21, 0xFF	; 255
 73c:	64 ea       	ldi	r22, 0xA4	; 164
 73e:	71 e0       	ldi	r23, 0x01	; 1
 740:	86 ea       	ldi	r24, 0xA6	; 166
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	aa dd       	rcall	.-1196   	; 0x29a <enqueue>
			flagProcessing = 0; // We have now finished processing the item
 746:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <flagProcessing>
			
			// Testing, verbose code. TODO remove later ****
			LCDClear();
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
			LCDHome();
 74e:	dd dc       	rcall	.-1606   	; 0x10a <LCDByte>
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	82 e0       	ldi	r24, 0x02	; 2
			LCDWriteString("Material: ");
 754:	da dc       	rcall	.-1612   	; 0x10a <LCDByte>
 756:	86 e5       	ldi	r24, 0x56	; 86
			LCDGotoXY(10,0);
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	17 dd       	rcall	.-1490   	; 0x18a <LCDWriteString>
 75c:	60 e0       	ldi	r22, 0x00	; 0
			LCDWriteString(getMaterialName(getMaterialType(ADC_result)));
 75e:	8a e0       	ldi	r24, 0x0A	; 10
 760:	7f dd       	rcall	.-1282   	; 0x260 <LCDGotoXY>
 762:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 766:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 76a:	21 de       	rcall	.-958    	; 0x3ae <getMaterialType>
 76c:	94 df       	rcall	.-216    	; 0x696 <getMaterialName>
 76e:	0d dd       	rcall	.-1510   	; 0x18a <LCDWriteString>
		}
				
		// Are there still more items on the conveyor?
		if (!isEmpty(&head)){ // Check if queue is not empty
 770:	86 ea       	ldi	r24, 0xA6	; 166
 772:	91 e0       	ldi	r25, 0x01	; 1
 774:	cb dd       	rcall	.-1130   	; 0x30c <isEmpty>
 776:	81 11       	cpse	r24, r1
 778:	1a c0       	rjmp	.+52     	; 0x7ae <main+0xde>
 77a:	86 ea       	ldi	r24, 0xA6	; 166
			stepperDestination = firstValue(&head).value;
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	c1 dd       	rcall	.-1150   	; 0x302 <firstValue>
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <stepperDestination+0x1>
 786:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <stepperDestination>
 78a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
			if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
 78e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 792:	82 17       	cp	r24, r18
 794:	93 07       	cpc	r25, r19
 796:	79 f0       	breq	.+30     	; 0x7b6 <main+0xe6>
 798:	82 1b       	sub	r24, r18
				} else if(abs(stepperDestination-stepperPos) > 50){
					stepperPauseTime = 15; // TODO **** these values are arbitrary. Need to use SPS method
				} else{
					stepperPauseTime = 20; // TODO **** these values are arbitrary. Need to use SPS method
				}*/
				rotate(1,(stepperDestination-stepperPos)>0); // rotate the stepper one step in proper direction
 79a:	93 0b       	sbc	r25, r19
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	18 16       	cp	r1, r24
 7a0:	19 06       	cpc	r1, r25
 7a2:	0c f0       	brlt	.+2      	; 0x7a6 <main+0xd6>
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	de de       	rcall	.-580    	; 0x568 <rotate>
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <main+0xe6>
				// TODO: possibly set a destination variable and have it rotate in the background using Timer2
				// TODO **** maybe change this later to rotate the optimal direction
				// Also need to figure out how to accelerate and decelerate. Probably requires doing fancier logic than "move one step".
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
 7ae:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagRampDown>
 7b2:	81 11       	cpse	r24, r1
 7b4:	24 c0       	rjmp	.+72     	; 0x7fe <main+0x12e>
			displaySorted(&head, &tail); // Display info on LCD
			return 0; // Program end
		}
		
		// Check if we need to pause
		if (flagPause){ // "Pause" routine
 7b6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
 7ba:	88 23       	and	r24, r24
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <main+0xf0>
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 7be:	a9 cf       	rjmp	.-174    	; 0x712 <main+0x42>
		}
		
		// Check if we need to pause
		if (flagPause){ // "Pause" routine
			updateDCMotorState(0); // Stop DC motor
			LCDClear();
 7c0:	15 b8       	out	0x05, r1	; 5
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
			LCDHome();
 7c6:	a1 dc       	rcall	.-1726   	; 0x10a <LCDByte>
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	82 e0       	ldi	r24, 0x02	; 2
			LCDWriteString("Paused");			
 7cc:	9e dc       	rcall	.-1732   	; 0x10a <LCDByte>
 7ce:	8e e6       	ldi	r24, 0x6E	; 110
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	db dc       	rcall	.-1610   	; 0x18a <LCDWriteString>
			displaySorted(&head, &tail); // Display info on LCD
 7d4:	64 ea       	ldi	r22, 0xA4	; 164
 7d6:	71 e0       	ldi	r23, 0x01	; 1
 7d8:	86 ea       	ldi	r24, 0xA6	; 166
 7da:	91 e0       	ldi	r25, 0x01	; 1
			
			while(flagPause){
 7dc:	55 de       	rcall	.-854    	; 0x488 <displaySorted>
 7de:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
				// Wait for pause/unpause button to be toggled off
			} 
			LCDClear();
 7e2:	81 11       	cpse	r24, r1
 7e4:	fc cf       	rjmp	.-8      	; 0x7de <main+0x10e>
 7e6:	60 e0       	ldi	r22, 0x00	; 0
			LCDHome();
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	8f dc       	rcall	.-1762   	; 0x10a <LCDByte>
 7ec:	60 e0       	ldi	r22, 0x00	; 0
			LCDWriteString("Unpaused");
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	8c dc       	rcall	.-1768   	; 0x10a <LCDByte>
 7f2:	85 e7       	ldi	r24, 0x75	; 117
 7f4:	91 e0       	ldi	r25, 0x01	; 1
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 7f6:	c9 dc       	rcall	.-1646   	; 0x18a <LCDWriteString>
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	85 b9       	out	0x05, r24	; 5
				// TODO: possibly set a destination variable and have it rotate in the background using Timer2
				// TODO **** maybe change this later to rotate the optimal direction
				// Also need to figure out how to accelerate and decelerate. Probably requires doing fancier logic than "move one step".
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
			LCDClear();
 7fc:	8a cf       	rjmp	.-236    	; 0x712 <main+0x42>
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	83 dc       	rcall	.-1786   	; 0x10a <LCDByte>
			LCDHome();
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	80 dc       	rcall	.-1792   	; 0x10a <LCDByte>
 80a:	81 e6       	ldi	r24, 0x61	; 97
			LCDWriteString("Ramping down");
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	bd dc       	rcall	.-1670   	; 0x18a <LCDWriteString>
 810:	88 ec       	ldi	r24, 0xC8	; 200
 812:	90 e0       	ldi	r25, 0x00	; 0
			
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
 814:	19 de       	rcall	.-974    	; 0x448 <mTimer>
 816:	15 b8       	out	0x05, r1	; 5
 818:	f8 94       	cli
 81a:	64 ea       	ldi	r22, 0xA4	; 164
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 81c:	71 e0       	ldi	r23, 0x01	; 1
			LCDHome();
			LCDWriteString("Ramping down");
			
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
			updateDCMotorState(0); // Stop conveyor motor
			cli(); // Stop all interrupts
 81e:	86 ea       	ldi	r24, 0xA6	; 166
			
			displaySorted(&head, &tail); // Display info on LCD
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	32 de       	rcall	.-924    	; 0x488 <displaySorted>
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
			LCDHome();
			LCDWriteString("Unpaused");
			updateDCMotorState(1);
		}
	}
} // main()
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	08 95       	ret

00000836 <__vector_1>:
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
}


// INTERRUPTS

ISR(INT0_vect){ // EX sensor
 83e:	11 24       	eor	r1, r1
 840:	0b b6       	in	r0, 0x3b	; 59
 842:	0f 92       	push	r0
 844:	2f 93       	push	r18
 846:	3f 93       	push	r19
 848:	4f 93       	push	r20
 84a:	5f 93       	push	r21
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	stepperDestination = firstValue(&head).value;
 85c:	86 ea       	ldi	r24, 0xA6	; 166
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	50 dd       	rcall	.-1376   	; 0x302 <firstValue>
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <stepperDestination+0x1>
 868:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <stepperDestination>
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
 86c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 870:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 874:	82 17       	cp	r24, r18
 876:	93 07       	cpc	r25, r19
 878:	a1 f0       	breq	.+40     	; 0x8a2 <__vector_1+0x6c>
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 87a:	15 b8       	out	0x05, r1	; 5

ISR(INT0_vect){ // EX sensor
	stepperDestination = firstValue(&head).value;
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
		updateDCMotorState(0); // Stop conveyor while we wait for the stepper to rotate to the correct position.
		flagConveyorStopped = 1; // Let other parts of program know we are stopped
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
		rotate( (stepperDestination-stepperPos), (stepperDestination-stepperPos)>0 /*1 for cw, 0 for ccw*/); // rotate to proper position
 882:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 886:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 88a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 88e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 892:	82 1b       	sub	r24, r18
 894:	93 0b       	sbc	r25, r19
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	18 16       	cp	r1, r24
 89a:	19 06       	cpc	r1, r25
 89c:	0c f0       	brlt	.+2      	; 0x8a0 <__vector_1+0x6a>
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	63 de       	rcall	.-826    	; 0x568 <rotate>
		// TODO: Add "width" around each stepper destination for faster bucket dropping ****
	}
	
	// We are now guaranteed to be at the correct position
	dequeue(&head,&tail,&deQueuedLink); // pop item out of queue
 8a2:	4a ea       	ldi	r20, 0xAA	; 170
 8a4:	51 e0       	ldi	r21, 0x01	; 1
 8a6:	64 ea       	ldi	r22, 0xA4	; 164
 8a8:	71 e0       	ldi	r23, 0x01	; 1
 8aa:	86 ea       	ldi	r24, 0xA6	; 166
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	13 dd       	rcall	.-1498   	; 0x2d6 <dequeue>
	free(deQueuedLink); // Not sure if this will cause errors, may need to re-allocate deQueuedLink next loop?
 8b0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <deQueuedLink>
 8b4:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <deQueuedLink+0x1>
 8b8:	7b d1       	rcall	.+758    	; 0xbb0 <free>
	itemsSorted++;
 8ba:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <itemsSorted>
 8be:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <itemsSorted+0x1>
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <itemsSorted+0x1>
 8c8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <itemsSorted>
	countSorted(stepperDestination); // count the type of item sorted
 8cc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 8d0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 8d4:	83 dd       	rcall	.-1274   	; 0x3dc <countSorted>
	
	if(flagConveyorStopped){
 8d6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
 8da:	88 23       	and	r24, r24
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <__vector_1+0xb0>
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 8de:	82 e0       	ldi	r24, 0x02	; 2
 8e0:	85 b9       	out	0x05, r24	; 5
	itemsSorted++;
	countSorted(stepperDestination); // count the type of item sorted
	
	if(flagConveyorStopped){
		updateDCMotorState(1); // restart conveyor motor
		flagConveyorStopped = 0; // reset flag
 8e2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
	}
}
 8e6:	ff 91       	pop	r31
 8e8:	ef 91       	pop	r30
 8ea:	bf 91       	pop	r27
 8ec:	af 91       	pop	r26
 8ee:	9f 91       	pop	r25
 8f0:	8f 91       	pop	r24
 8f2:	7f 91       	pop	r23
 8f4:	6f 91       	pop	r22
 8f6:	5f 91       	pop	r21
 8f8:	4f 91       	pop	r20
 8fa:	3f 91       	pop	r19
 8fc:	2f 91       	pop	r18
 8fe:	0f 90       	pop	r0
 900:	0b be       	out	0x3b, r0	; 59
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <__vector_2>:

ISR(INT1_vect){ // OR sensor
 90c:	1f 92       	push	r1
 90e:	0f 92       	push	r0
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	0b b6       	in	r0, 0x3b	; 59
 918:	0f 92       	push	r0
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
	flagProcessing = 1; // Lets us know that we currently are trying to identify an object
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <flagProcessing>
	ADC_result = 0x400; // Reset value to highest number (10-bit ADC, so max value of ADC is 0x3FF)
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	94 e0       	ldi	r25, 0x04	; 4
 92c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ADC_result+0x1>
 930:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ADC_result>
	ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 934:	ea e7       	ldi	r30, 0x7A	; 122
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	80 64       	ori	r24, 0x40	; 64
 93c:	80 83       	st	Z, r24
}
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	9f 91       	pop	r25
 944:	8f 91       	pop	r24
 946:	0f 90       	pop	r0
 948:	0b be       	out	0x3b, r0	; 59
 94a:	0f 90       	pop	r0
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	0f 90       	pop	r0
 950:	1f 90       	pop	r1
 952:	18 95       	reti

00000954 <__vector_4>:
/* NOTE: no interrupt for HE
ISR(INT2_vect){ // HE sensor
	flagHE = 1;
}*/

ISR(INT3_vect){ // Left button pressed
 954:	1f 92       	push	r1
 956:	0f 92       	push	r0
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	0f 92       	push	r0
 95c:	11 24       	eor	r1, r1
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
	flagPause = !flagPause;
 962:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <flagPause>
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	91 11       	cpse	r25, r1
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <flagPause>
}
 970:	9f 91       	pop	r25
 972:	8f 91       	pop	r24
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_5>:

ISR(INT4_vect){ // Right button pressed
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
 988:	8f 93       	push	r24
	flagRampDown = 1;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <flagRampDown>
}
 990:	8f 91       	pop	r24
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_29>:

ISR(ADC_vect){ // Analog to Digital conversion
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	0b b6       	in	r0, 0x3b	; 59
 9a8:	0f 92       	push	r0
 9aa:	2f 93       	push	r18
 9ac:	3f 93       	push	r19
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
	new_ADC_result = ADC;
 9b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 9ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 9be:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <new_ADC_result+0x1>
 9c2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <new_ADC_result>
	if(new_ADC_result < ADC_result){ // Want lowest value for highest reflectivity
 9c6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <new_ADC_result>
 9ca:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <new_ADC_result+0x1>
 9ce:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 9d2:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 9d6:	28 17       	cp	r18, r24
 9d8:	39 07       	cpc	r19, r25
 9da:	40 f4       	brcc	.+16     	; 0x9ec <__vector_29+0x50>
		ADC_result = new_ADC_result; // store ADC converted value to ADC_result 
 9dc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <new_ADC_result>
 9e0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <new_ADC_result+0x1>
 9e4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ADC_result+0x1>
 9e8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ADC_result>
	}
	// Check OR==high? (optical sensor #1) (Pin D1)
	if((PIND & 0x02)==0x02){
 9ec:	49 9b       	sbis	0x09, 1	; 9
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__vector_29+0x5e>
		ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 9f0:	ea e7       	ldi	r30, 0x7A	; 122
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	80 64       	ori	r24, 0x40	; 64
 9f8:	80 83       	st	Z, r24
	}
}
 9fa:	ff 91       	pop	r31
 9fc:	ef 91       	pop	r30
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0b be       	out	0x3b, r0	; 59
 a0a:	0f 90       	pop	r0
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	0f 90       	pop	r0
 a10:	1f 90       	pop	r1
 a12:	18 95       	reti

00000a14 <__vector_default>:

ISR(BADISR_vect){ // Bad ISR catch statement
 a14:	1f 92       	push	r1
 a16:	0f 92       	push	r0
 a18:	0f b6       	in	r0, 0x3f	; 63
 a1a:	0f 92       	push	r0
 a1c:	11 24       	eor	r1, r1
	LCDClear();
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	73 db       	rcall	.-2330   	; 0x10a <LCDByte>
	LCDWriteStringXY(1,1,"BAD ISR");
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	1b dc       	rcall	.-1994   	; 0x260 <LCDGotoXY>
 a2a:	8e e7       	ldi	r24, 0x7E	; 126
 a2c:	91 e0       	ldi	r25, 0x01	; 1
 a2e:	ad db       	rcall	.-2214   	; 0x18a <LCDWriteString>
 a30:	ff cf       	rjmp	.-2      	; 0xa30 <__vector_default+0x1c>

00000a32 <__divmodhi4>:
 a32:	97 fb       	bst	r25, 7
 a34:	07 2e       	mov	r0, r23
 a36:	16 f4       	brtc	.+4      	; 0xa3c <__divmodhi4+0xa>
 a38:	00 94       	com	r0
 a3a:	06 d0       	rcall	.+12     	; 0xa48 <__divmodhi4_neg1>
 a3c:	77 fd       	sbrc	r23, 7
 a3e:	08 d0       	rcall	.+16     	; 0xa50 <__divmodhi4_neg2>
 a40:	0b d0       	rcall	.+22     	; 0xa58 <__udivmodhi4>
 a42:	07 fc       	sbrc	r0, 7
 a44:	05 d0       	rcall	.+10     	; 0xa50 <__divmodhi4_neg2>
 a46:	3e f4       	brtc	.+14     	; 0xa56 <__divmodhi4_exit>

00000a48 <__divmodhi4_neg1>:
 a48:	90 95       	com	r25
 a4a:	81 95       	neg	r24
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	08 95       	ret

00000a50 <__divmodhi4_neg2>:
 a50:	70 95       	com	r23
 a52:	61 95       	neg	r22
 a54:	7f 4f       	sbci	r23, 0xFF	; 255

00000a56 <__divmodhi4_exit>:
 a56:	08 95       	ret

00000a58 <__udivmodhi4>:
 a58:	aa 1b       	sub	r26, r26
 a5a:	bb 1b       	sub	r27, r27
 a5c:	51 e1       	ldi	r21, 0x11	; 17
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__udivmodhi4_ep>

00000a60 <__udivmodhi4_loop>:
 a60:	aa 1f       	adc	r26, r26
 a62:	bb 1f       	adc	r27, r27
 a64:	a6 17       	cp	r26, r22
 a66:	b7 07       	cpc	r27, r23
 a68:	10 f0       	brcs	.+4      	; 0xa6e <__udivmodhi4_ep>
 a6a:	a6 1b       	sub	r26, r22
 a6c:	b7 0b       	sbc	r27, r23

00000a6e <__udivmodhi4_ep>:
 a6e:	88 1f       	adc	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	5a 95       	dec	r21
 a74:	a9 f7       	brne	.-22     	; 0xa60 <__udivmodhi4_loop>
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	bc 01       	movw	r22, r24
 a7c:	cd 01       	movw	r24, r26
 a7e:	08 95       	ret

00000a80 <malloc>:
 a80:	0f 93       	push	r16
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	91 05       	cpc	r25, r1
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <malloc+0x12>
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__flp>
 a96:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <__flp+0x1>
 a9a:	20 e0       	ldi	r18, 0x00	; 0
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	a0 e0       	ldi	r26, 0x00	; 0
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	30 97       	sbiw	r30, 0x00	; 0
 aa4:	19 f1       	breq	.+70     	; 0xaec <malloc+0x6c>
 aa6:	40 81       	ld	r20, Z
 aa8:	51 81       	ldd	r21, Z+1	; 0x01
 aaa:	02 81       	ldd	r16, Z+2	; 0x02
 aac:	13 81       	ldd	r17, Z+3	; 0x03
 aae:	48 17       	cp	r20, r24
 ab0:	59 07       	cpc	r21, r25
 ab2:	c8 f0       	brcs	.+50     	; 0xae6 <malloc+0x66>
 ab4:	84 17       	cp	r24, r20
 ab6:	95 07       	cpc	r25, r21
 ab8:	69 f4       	brne	.+26     	; 0xad4 <malloc+0x54>
 aba:	10 97       	sbiw	r26, 0x00	; 0
 abc:	31 f0       	breq	.+12     	; 0xaca <malloc+0x4a>
 abe:	12 96       	adiw	r26, 0x02	; 2
 ac0:	0c 93       	st	X, r16
 ac2:	12 97       	sbiw	r26, 0x02	; 2
 ac4:	13 96       	adiw	r26, 0x03	; 3
 ac6:	1c 93       	st	X, r17
 ac8:	27 c0       	rjmp	.+78     	; 0xb18 <malloc+0x98>
 aca:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <__flp>
 ace:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <__flp+0x1>
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <malloc+0x98>
 ad4:	21 15       	cp	r18, r1
 ad6:	31 05       	cpc	r19, r1
 ad8:	19 f0       	breq	.+6      	; 0xae0 <malloc+0x60>
 ada:	42 17       	cp	r20, r18
 adc:	53 07       	cpc	r21, r19
 ade:	18 f4       	brcc	.+6      	; 0xae6 <malloc+0x66>
 ae0:	9a 01       	movw	r18, r20
 ae2:	bd 01       	movw	r22, r26
 ae4:	ef 01       	movw	r28, r30
 ae6:	df 01       	movw	r26, r30
 ae8:	f8 01       	movw	r30, r16
 aea:	db cf       	rjmp	.-74     	; 0xaa2 <malloc+0x22>
 aec:	21 15       	cp	r18, r1
 aee:	31 05       	cpc	r19, r1
 af0:	f9 f0       	breq	.+62     	; 0xb30 <malloc+0xb0>
 af2:	28 1b       	sub	r18, r24
 af4:	39 0b       	sbc	r19, r25
 af6:	24 30       	cpi	r18, 0x04	; 4
 af8:	31 05       	cpc	r19, r1
 afa:	80 f4       	brcc	.+32     	; 0xb1c <malloc+0x9c>
 afc:	8a 81       	ldd	r24, Y+2	; 0x02
 afe:	9b 81       	ldd	r25, Y+3	; 0x03
 b00:	61 15       	cp	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	21 f0       	breq	.+8      	; 0xb0e <malloc+0x8e>
 b06:	fb 01       	movw	r30, r22
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	82 83       	std	Z+2, r24	; 0x02
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <malloc+0x96>
 b0e:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__flp+0x1>
 b12:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__flp>
 b16:	fe 01       	movw	r30, r28
 b18:	32 96       	adiw	r30, 0x02	; 2
 b1a:	44 c0       	rjmp	.+136    	; 0xba4 <malloc+0x124>
 b1c:	fe 01       	movw	r30, r28
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	81 93       	st	Z+, r24
 b24:	91 93       	st	Z+, r25
 b26:	22 50       	subi	r18, 0x02	; 2
 b28:	31 09       	sbc	r19, r1
 b2a:	39 83       	std	Y+1, r19	; 0x01
 b2c:	28 83       	st	Y, r18
 b2e:	3a c0       	rjmp	.+116    	; 0xba4 <malloc+0x124>
 b30:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 b34:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 b38:	23 2b       	or	r18, r19
 b3a:	41 f4       	brne	.+16     	; 0xb4c <malloc+0xcc>
 b3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b44:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <__brkval+0x1>
 b48:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <__brkval>
 b4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	41 f4       	brne	.+16     	; 0xb6a <malloc+0xea>
 b5a:	2d b7       	in	r18, 0x3d	; 61
 b5c:	3e b7       	in	r19, 0x3e	; 62
 b5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b66:	24 1b       	sub	r18, r20
 b68:	35 0b       	sbc	r19, r21
 b6a:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__brkval>
 b6e:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <__brkval+0x1>
 b72:	e2 17       	cp	r30, r18
 b74:	f3 07       	cpc	r31, r19
 b76:	a0 f4       	brcc	.+40     	; 0xba0 <malloc+0x120>
 b78:	2e 1b       	sub	r18, r30
 b7a:	3f 0b       	sbc	r19, r31
 b7c:	28 17       	cp	r18, r24
 b7e:	39 07       	cpc	r19, r25
 b80:	78 f0       	brcs	.+30     	; 0xba0 <malloc+0x120>
 b82:	ac 01       	movw	r20, r24
 b84:	4e 5f       	subi	r20, 0xFE	; 254
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	24 17       	cp	r18, r20
 b8a:	35 07       	cpc	r19, r21
 b8c:	48 f0       	brcs	.+18     	; 0xba0 <malloc+0x120>
 b8e:	4e 0f       	add	r20, r30
 b90:	5f 1f       	adc	r21, r31
 b92:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__brkval+0x1>
 b96:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__brkval>
 b9a:	81 93       	st	Z+, r24
 b9c:	91 93       	st	Z+, r25
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <malloc+0x124>
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	cf 01       	movw	r24, r30
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	08 95       	ret

00000bb0 <free>:
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	09 f4       	brne	.+2      	; 0xbba <free+0xa>
 bb8:	81 c0       	rjmp	.+258    	; 0xcbc <free+0x10c>
 bba:	fc 01       	movw	r30, r24
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	13 82       	std	Z+3, r1	; 0x03
 bc0:	12 82       	std	Z+2, r1	; 0x02
 bc2:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <__flp>
 bc6:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <__flp+0x1>
 bca:	10 97       	sbiw	r26, 0x00	; 0
 bcc:	81 f4       	brne	.+32     	; 0xbee <free+0x3e>
 bce:	20 81       	ld	r18, Z
 bd0:	31 81       	ldd	r19, Z+1	; 0x01
 bd2:	82 0f       	add	r24, r18
 bd4:	93 1f       	adc	r25, r19
 bd6:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 bda:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 bde:	28 17       	cp	r18, r24
 be0:	39 07       	cpc	r19, r25
 be2:	51 f5       	brne	.+84     	; 0xc38 <free+0x88>
 be4:	f0 93 ad 01 	sts	0x01AD, r31	; 0x8001ad <__brkval+0x1>
 be8:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <__brkval>
 bec:	67 c0       	rjmp	.+206    	; 0xcbc <free+0x10c>
 bee:	ed 01       	movw	r28, r26
 bf0:	20 e0       	ldi	r18, 0x00	; 0
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	ce 17       	cp	r28, r30
 bf6:	df 07       	cpc	r29, r31
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <free+0x5a>
 bfa:	4a 81       	ldd	r20, Y+2	; 0x02
 bfc:	5b 81       	ldd	r21, Y+3	; 0x03
 bfe:	9e 01       	movw	r18, r28
 c00:	41 15       	cp	r20, r1
 c02:	51 05       	cpc	r21, r1
 c04:	f1 f0       	breq	.+60     	; 0xc42 <free+0x92>
 c06:	ea 01       	movw	r28, r20
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <free+0x44>
 c0a:	d3 83       	std	Z+3, r29	; 0x03
 c0c:	c2 83       	std	Z+2, r28	; 0x02
 c0e:	40 81       	ld	r20, Z
 c10:	51 81       	ldd	r21, Z+1	; 0x01
 c12:	84 0f       	add	r24, r20
 c14:	95 1f       	adc	r25, r21
 c16:	c8 17       	cp	r28, r24
 c18:	d9 07       	cpc	r29, r25
 c1a:	59 f4       	brne	.+22     	; 0xc32 <free+0x82>
 c1c:	88 81       	ld	r24, Y
 c1e:	99 81       	ldd	r25, Y+1	; 0x01
 c20:	84 0f       	add	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	02 96       	adiw	r24, 0x02	; 2
 c26:	91 83       	std	Z+1, r25	; 0x01
 c28:	80 83       	st	Z, r24
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	9b 81       	ldd	r25, Y+3	; 0x03
 c2e:	93 83       	std	Z+3, r25	; 0x03
 c30:	82 83       	std	Z+2, r24	; 0x02
 c32:	21 15       	cp	r18, r1
 c34:	31 05       	cpc	r19, r1
 c36:	29 f4       	brne	.+10     	; 0xc42 <free+0x92>
 c38:	f0 93 af 01 	sts	0x01AF, r31	; 0x8001af <__flp+0x1>
 c3c:	e0 93 ae 01 	sts	0x01AE, r30	; 0x8001ae <__flp>
 c40:	3d c0       	rjmp	.+122    	; 0xcbc <free+0x10c>
 c42:	e9 01       	movw	r28, r18
 c44:	fb 83       	std	Y+3, r31	; 0x03
 c46:	ea 83       	std	Y+2, r30	; 0x02
 c48:	49 91       	ld	r20, Y+
 c4a:	59 91       	ld	r21, Y+
 c4c:	c4 0f       	add	r28, r20
 c4e:	d5 1f       	adc	r29, r21
 c50:	ec 17       	cp	r30, r28
 c52:	fd 07       	cpc	r31, r29
 c54:	61 f4       	brne	.+24     	; 0xc6e <free+0xbe>
 c56:	80 81       	ld	r24, Z
 c58:	91 81       	ldd	r25, Z+1	; 0x01
 c5a:	84 0f       	add	r24, r20
 c5c:	95 1f       	adc	r25, r21
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	e9 01       	movw	r28, r18
 c62:	99 83       	std	Y+1, r25	; 0x01
 c64:	88 83       	st	Y, r24
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	93 81       	ldd	r25, Z+3	; 0x03
 c6a:	9b 83       	std	Y+3, r25	; 0x03
 c6c:	8a 83       	std	Y+2, r24	; 0x02
 c6e:	e0 e0       	ldi	r30, 0x00	; 0
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	12 96       	adiw	r26, 0x02	; 2
 c74:	8d 91       	ld	r24, X+
 c76:	9c 91       	ld	r25, X
 c78:	13 97       	sbiw	r26, 0x03	; 3
 c7a:	00 97       	sbiw	r24, 0x00	; 0
 c7c:	19 f0       	breq	.+6      	; 0xc84 <free+0xd4>
 c7e:	fd 01       	movw	r30, r26
 c80:	dc 01       	movw	r26, r24
 c82:	f7 cf       	rjmp	.-18     	; 0xc72 <free+0xc2>
 c84:	8d 91       	ld	r24, X+
 c86:	9c 91       	ld	r25, X
 c88:	11 97       	sbiw	r26, 0x01	; 1
 c8a:	9d 01       	movw	r18, r26
 c8c:	2e 5f       	subi	r18, 0xFE	; 254
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	82 0f       	add	r24, r18
 c92:	93 1f       	adc	r25, r19
 c94:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 c98:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 c9c:	28 17       	cp	r18, r24
 c9e:	39 07       	cpc	r19, r25
 ca0:	69 f4       	brne	.+26     	; 0xcbc <free+0x10c>
 ca2:	30 97       	sbiw	r30, 0x00	; 0
 ca4:	29 f4       	brne	.+10     	; 0xcb0 <free+0x100>
 ca6:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <__flp+0x1>
 caa:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__flp>
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <free+0x104>
 cb0:	13 82       	std	Z+3, r1	; 0x03
 cb2:	12 82       	std	Z+2, r1	; 0x02
 cb4:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <__brkval+0x1>
 cb8:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <__brkval>
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	08 95       	ret

00000cc2 <_exit>:
 cc2:	f8 94       	cli

00000cc4 <__stop_program>:
 cc4:	ff cf       	rjmp	.-2      	; 0xcc4 <__stop_program>
