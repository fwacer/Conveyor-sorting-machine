
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080012a  0080012a  00000b4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc9  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e1  00000000  00000000  00002ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cee  00000000  00000000  00003bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  000048a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  00004c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbc  00000000  00000000  00005509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000064c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	70 c3       	rjmp	.+1760   	; 0x6e6 <__vector_1>
   6:	00 00       	nop
   8:	8f c3       	rjmp	.+1822   	; 0x728 <__vector_2>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c3       	rjmp	.+1886   	; 0x770 <__vector_4>
  12:	00 00       	nop
  14:	bc c3       	rjmp	.+1912   	; 0x78e <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c3       	rjmp	.+1846   	; 0x7ac <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e9       	ldi	r30, 0x90	; 144
  ac:	fa e0       	ldi	r31, 0x0A	; 10
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	aa 32       	cpi	r26, 0x2A	; 42
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	aa e2       	ldi	r26, 0x2A	; 42
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 33       	cpi	r26, 0x3C	; 60
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	10 d2       	rcall	.+1056   	; 0x4f0 <main>
  d0:	dd c4       	rjmp	.+2490   	; 0xa8c <_exit>

000000d2 <__bad_interrupt>:
  d2:	ac c3       	rjmp	.+1880   	; 0x82c <__vector_default>

000000d4 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	87 b9       	out	0x07, r24	; 7
  da:	45 9a       	sbi	0x08, 5	; 8
  dc:	46 98       	cbi	0x08, 6	; 8
  de:	00 00       	nop
  e0:	47 9a       	sbi	0x08, 7	; 8
  e2:	00 00       	nop
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	00 00       	nop
  ec:	47 98       	cbi	0x08, 7	; 8
  ee:	00 00       	nop
  f0:	47 9a       	sbi	0x08, 7	; 8
  f2:	00 00       	nop
  f4:	96 b1       	in	r25, 0x06	; 6
  f6:	00 00       	nop
  f8:	47 98       	cbi	0x08, 7	; 8
  fa:	00 00       	nop
  fc:	88 23       	and	r24, r24
  fe:	84 f3       	brlt	.-32     	; 0xe0 <LCDBusyLoop+0xc>
 100:	45 98       	cbi	0x08, 5	; 8
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	87 b9       	out	0x07, r24	; 7
 108:	08 95       	ret

0000010a <LCDByte>:
 10a:	28 2f       	mov	r18, r24
 10c:	22 95       	swap	r18
 10e:	2f 70       	andi	r18, 0x0F	; 15
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	61 11       	cpse	r22, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <LCDByte+0x10>
 116:	46 98       	cbi	0x08, 6	; 8
 118:	01 c0       	rjmp	.+2      	; 0x11c <LCDByte+0x12>
 11a:	46 9a       	sbi	0x08, 6	; 8
 11c:	00 00       	nop
 11e:	47 9a       	sbi	0x08, 7	; 8
 120:	98 b1       	in	r25, 0x08	; 8
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	92 2b       	or	r25, r18
 126:	98 b9       	out	0x08, r25	; 8
 128:	00 00       	nop
 12a:	47 98       	cbi	0x08, 7	; 8
 12c:	00 00       	nop
 12e:	47 9a       	sbi	0x08, 7	; 8
 130:	98 b1       	in	r25, 0x08	; 8
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	89 2b       	or	r24, r25
 136:	88 b9       	out	0x08, r24	; 8
 138:	00 00       	nop
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	00 00       	nop
 13e:	ca cf       	rjmp	.-108    	; 0xd4 <LCDBusyLoop>
 140:	08 95       	ret

00000142 <InitLCD>:
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	8b e4       	ldi	r24, 0x4B	; 75
 148:	9d e1       	ldi	r25, 0x1D	; 29
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <InitLCD+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <InitLCD+0xe>
 150:	00 00       	nop
 152:	87 b1       	in	r24, 0x07	; 7
 154:	8f 60       	ori	r24, 0x0F	; 15
 156:	87 b9       	out	0x07, r24	; 7
 158:	3f 9a       	sbi	0x07, 7	; 7
 15a:	3e 9a       	sbi	0x07, 6	; 7
 15c:	3d 9a       	sbi	0x07, 5	; 7
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	88 b9       	out	0x08, r24	; 8
 164:	47 98       	cbi	0x08, 7	; 8
 166:	45 98       	cbi	0x08, 5	; 8
 168:	46 98       	cbi	0x08, 6	; 8
 16a:	00 00       	nop
 16c:	47 9a       	sbi	0x08, 7	; 8
 16e:	41 9a       	sbi	0x08, 1	; 8
 170:	00 00       	nop
 172:	47 98       	cbi	0x08, 7	; 8
 174:	00 00       	nop
 176:	ae df       	rcall	.-164    	; 0xd4 <LCDBusyLoop>
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8c 2f       	mov	r24, r28
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	c5 df       	rcall	.-118    	; 0x10a <LCDByte>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	c2 df       	rcall	.-124    	; 0x10a <LCDByte>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LCDWriteString>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2 <LCDWriteString+0x18>
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	b7 df       	rcall	.-146    	; 0x10a <LCDByte>
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <LCDWriteString+0xe>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 1a8:	88 32       	cpi	r24, 0x28	; 40
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 1ac:	61 11       	cpse	r22, r1
 1ae:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	aa cf       	rjmp	.-172    	; 0x10a <LCDByte>
 1b6:	08 95       	ret

000001b8 <setup>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
 1b8:	fc 01       	movw	r30, r24
 1ba:	11 82       	std	Z+1, r1	; 0x01
 1bc:	10 82       	st	Z, r1
 1be:	fb 01       	movw	r30, r22
 1c0:	11 82       	std	Z+1, r1	; 0x01
 1c2:	10 82       	st	Z, r1
 1c4:	08 95       	ret

000001c6 <initLink>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	3c d3       	rcall	.+1656   	; 0x84a <malloc>
 1d2:	99 83       	std	Y+1, r25	; 0x01
 1d4:	88 83       	st	Y, r24
 1d6:	fc 01       	movw	r30, r24
 1d8:	12 82       	std	Z+2, r1	; 0x02
 1da:	11 82       	std	Z+1, r1	; 0x01
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <enqueue>:
 1e2:	db 01       	movw	r26, r22
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	30 97       	sbiw	r30, 0x00	; 0
 1ea:	61 f0       	breq	.+24     	; 0x204 <enqueue+0x22>
 1ec:	da 01       	movw	r26, r20
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	92 83       	std	Z+2, r25	; 0x02
 1f6:	81 83       	std	Z+1, r24	; 0x01
 1f8:	8d 91       	ld	r24, X+
 1fa:	9c 91       	ld	r25, X
 1fc:	fb 01       	movw	r30, r22
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
 202:	08 95       	ret
 204:	da 01       	movw	r26, r20
 206:	2d 91       	ld	r18, X+
 208:	3c 91       	ld	r19, X
 20a:	11 97       	sbiw	r26, 0x01	; 1
 20c:	fc 01       	movw	r30, r24
 20e:	31 83       	std	Z+1, r19	; 0x01
 210:	20 83       	st	Z, r18
 212:	8d 91       	ld	r24, X+
 214:	9c 91       	ld	r25, X
 216:	db 01       	movw	r26, r22
 218:	8d 93       	st	X+, r24
 21a:	9c 93       	st	X, r25
 21c:	08 95       	ret

0000021e <dequeue>:
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	91 81       	ldd	r25, Z+1	; 0x01
 224:	da 01       	movw	r26, r20
 226:	8d 93       	st	X+, r24
 228:	9c 93       	st	X, r25
 22a:	a0 81       	ld	r26, Z
 22c:	b1 81       	ldd	r27, Z+1	; 0x01
 22e:	10 97       	sbiw	r26, 0x00	; 0
 230:	59 f0       	breq	.+22     	; 0x248 <dequeue+0x2a>
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	8d 91       	ld	r24, X+
 236:	9c 91       	ld	r25, X
 238:	12 97       	sbiw	r26, 0x02	; 2
 23a:	91 83       	std	Z+1, r25	; 0x01
 23c:	80 83       	st	Z, r24
 23e:	89 2b       	or	r24, r25
 240:	19 f4       	brne	.+6      	; 0x248 <dequeue+0x2a>
 242:	fb 01       	movw	r30, r22
 244:	11 82       	std	Z+1, r1	; 0x01
 246:	10 82       	st	Z, r1
 248:	08 95       	ret

0000024a <firstValue>:
 24a:	dc 01       	movw	r26, r24
 24c:	ed 91       	ld	r30, X+
 24e:	fc 91       	ld	r31, X
 250:	80 81       	ld	r24, Z
 252:	08 95       	ret

00000254 <isEmpty>:
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
 254:	fc 01       	movw	r30, r24
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	20 81       	ld	r18, Z
 25a:	31 81       	ldd	r19, Z+1	; 0x01
 25c:	23 2b       	or	r18, r19
 25e:	09 f0       	breq	.+2      	; 0x262 <isEmpty+0xe>
 260:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
 262:	08 95       	ret

00000264 <setupADC>:
		if(!TOGGLE_DIRECTION){
			// Counter-clockwise (IA)
			PORTB = 0b11110001; // IA & EA & EB (active low inputs)
		}else{
			// Clockwise (IB)
			PORTB = 0b11110010; // IB & EA & EB (active low inputs)
 264:	e9 e6       	ldi	r30, 0x69	; 105
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 63       	ori	r24, 0x30	; 48
 26c:	80 83       	st	Z, r24
 26e:	ea e7       	ldi	r30, 0x7A	; 122
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 68       	ori	r24, 0x80	; 128
 276:	80 83       	st	Z, r24
 278:	80 81       	ld	r24, Z
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	80 83       	st	Z, r24
 27e:	ec e7       	ldi	r30, 0x7C	; 124
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 66       	ori	r24, 0x60	; 96
 286:	80 83       	st	Z, r24
 288:	ee e7       	ldi	r30, 0x7E	; 126
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <initPWM>:
 294:	84 b5       	in	r24, 0x24	; 36
 296:	81 60       	ori	r24, 0x01	; 1
 298:	84 bd       	out	0x24, r24	; 36
 29a:	84 b5       	in	r24, 0x24	; 36
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	84 bd       	out	0x24, r24	; 36
 2a0:	84 b5       	in	r24, 0x24	; 36
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	84 bd       	out	0x24, r24	; 36
 2a6:	85 b5       	in	r24, 0x25	; 37
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	85 bd       	out	0x25, r24	; 37
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	87 bd       	out	0x27, r24	; 39
 2b0:	84 b9       	out	0x04, r24	; 4
 2b2:	08 95       	ret

000002b4 <displaySorted>:
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	25 df       	rcall	.-438    	; 0x10a <LCDByte>
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	22 df       	rcall	.-444    	; 0x10a <LCDByte>
 2c6:	ce 01       	movw	r24, r28
 2c8:	c5 df       	rcall	.-118    	; 0x254 <isEmpty>
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	5d df       	rcall	.-326    	; 0x18a <LCDWriteString>
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <getMaterialType>:
 2d6:	8d 3a       	cpi	r24, 0xAD	; 173
 2d8:	23 e0       	ldi	r18, 0x03	; 3
 2da:	92 07       	cpc	r25, r18
 2dc:	54 f4       	brge	.+20     	; 0x2f2 <getMaterialType+0x1c>
 2de:	8c 3b       	cpi	r24, 0xBC	; 188
 2e0:	22 e0       	ldi	r18, 0x02	; 2
 2e2:	92 07       	cpc	r25, r18
 2e4:	4c f4       	brge	.+18     	; 0x2f8 <getMaterialType+0x22>
 2e6:	8f 35       	cpi	r24, 0x5F	; 95
 2e8:	91 40       	sbci	r25, 0x01	; 1
 2ea:	4c f4       	brge	.+18     	; 0x2fe <getMaterialType+0x28>
 2ec:	82 e3       	ldi	r24, 0x32	; 50
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	08 95       	ret
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
 2f8:	84 e6       	ldi	r24, 0x64	; 100
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	08 95       	ret
 2fe:	86 e9       	ldi	r24, 0x96	; 150
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret

00000304 <mTimer>:
		}
	}
} // updateDCMotorState()

void mTimer(int count){
 304:	ac 01       	movw	r20, r24
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
	TCCR1B |= _BV(WGM12); // Set Waveform Generation mode to Clear Timer on Compare Math mode
 306:	e1 e8       	ldi	r30, 0x81	; 129
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	90 81       	ld	r25, Z
 30c:	98 60       	ori	r25, 0x08	; 8
 30e:	90 83       	st	Z, r25
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
 310:	88 ee       	ldi	r24, 0xE8	; 232
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 318:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0x0000; // Set initial value of Timer Counter
 31c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 320:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
 324:	b1 9a       	sbi	0x16, 1	; 22
	}
} // updateDCMotorState()

void mTimer(int count){
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 32a:	05 c0       	rjmp	.+10     	; 0x336 <mTimer+0x32>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 32c:	b1 9b       	sbis	0x16, 1	; 22
 32e:	fe cf       	rjmp	.-4      	; 0x32c <mTimer+0x28>
			TIFR1 |= _BV(OCF1A); // Clear interrupt flag
 330:	b1 9a       	sbi	0x16, 1	; 22
			i++; // Continue to next cycle
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 336:	24 17       	cp	r18, r20
 338:	35 07       	cpc	r19, r21
 33a:	1c f4       	brge	.+6      	; 0x342 <mTimer+0x3e>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 33c:	b1 9b       	sbis	0x16, 1	; 22
 33e:	f6 cf       	rjmp	.-20     	; 0x32c <mTimer+0x28>
 340:	f7 cf       	rjmp	.-18     	; 0x330 <mTimer+0x2c>
 342:	08 95       	ret

00000344 <rotate>:
		return 50; // Aluminum
	}
	
} // getMaterialType()

void rotate(int count, char cw /* 1 rotates cw, 0 rotates ccw */){
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
	// Rotate the stepper motor by "count" number of steps
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
 352:	18 16       	cp	r1, r24
 354:	19 06       	cpc	r1, r25
 356:	0c f0       	brlt	.+2      	; 0x35a <rotate+0x16>
 358:	58 c0       	rjmp	.+176    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 35a:	d6 2e       	mov	r13, r22
 35c:	ec 01       	movw	r28, r24
 35e:	e1 2c       	mov	r14, r1
 360:	f1 2c       	mov	r15, r1
		if(step>3){ // Overflow condition
			step = 0;
		}else if (step<0){ // Underflow condition
			step = 3;
 362:	03 e0       	ldi	r16, 0x03	; 3
 364:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
		if(step>3){ // Overflow condition
 366:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <step>
 36a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <step+0x1>
 36e:	84 30       	cpi	r24, 0x04	; 4
 370:	91 05       	cpc	r25, r1
 372:	2c f0       	brlt	.+10     	; 0x37e <rotate+0x3a>
			step = 0;
 374:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <step+0x1>
 378:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <step>
 37c:	06 c0       	rjmp	.+12     	; 0x38a <rotate+0x46>
		}else if (step<0){ // Underflow condition
 37e:	99 23       	and	r25, r25
 380:	24 f4       	brge	.+8      	; 0x38a <rotate+0x46>
			step = 3;
 382:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <step+0x1>
 386:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <step>
		} // end if
		
		PORTA = step_array[step]; // Set next step for stepper motor
 38a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <step>
 38e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <step+0x1>
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	ef 5d       	subi	r30, 0xDF	; 223
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 81       	ld	r24, Z
 39c:	82 b9       	out	0x02, r24	; 2
		if (cw){ // Advance to next step in specified direction
 39e:	dd 20       	and	r13, r13
 3a0:	a9 f0       	breq	.+42     	; 0x3cc <rotate+0x88>
			step++;
 3a2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <step>
 3a6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <step+0x1>
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step+0x1>
 3b0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step>
			if(stepperPos>200) // Cover overflow condition
 3b4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <stepperPos>
 3b8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <stepperPos+0x1>
 3bc:	89 3c       	cpi	r24, 0xC9	; 201
 3be:	91 05       	cpc	r25, r1
 3c0:	c4 f0       	brlt	.+48     	; 0x3f2 <rotate+0xae>
				stepperPos = 0;
 3c2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <stepperPos+0x1>
 3c6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stepperPos>
 3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <rotate+0xae>
		} else{
			step--;
 3cc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <step>
 3d0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <step+0x1>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step+0x1>
 3da:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step>
			if(stepperPos<0) // Cover overflow condition
 3de:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <stepperPos>
 3e2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <stepperPos+0x1>
 3e6:	99 23       	and	r25, r25
 3e8:	24 f4       	brge	.+8      	; 0x3f2 <rotate+0xae>
				stepperPos = 0;
 3ea:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <stepperPos+0x1>
 3ee:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stepperPos>
		}
		mTimer(stepperPauseTime); // **** TODO this may need adjusted as it could throw off timing of control loop
 3f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepperPauseTime>
 3f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepperPauseTime+0x1>
 3fa:	84 df       	rcall	.-248    	; 0x304 <mTimer>
	// Rotate the stepper motor by "count" number of steps
	int i;
	// Pin order, MSB first: 0 0 E1 L1 L2 E2 L3 L4
	static int step_array[] = {0b00110000,0b00000110,0b00101000,0b00000101};
	
	for(i=0; i<count; i++){
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	e8 1a       	sub	r14, r24
 400:	f8 0a       	sbc	r15, r24
 402:	ce 15       	cp	r28, r14
 404:	df 05       	cpc	r29, r15
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	ae cf       	rjmp	.-164    	; 0x366 <rotate+0x22>
				stepperPos = 0;
		}
		mTimer(stepperPauseTime); // **** TODO this may need adjusted as it could throw off timing of control loop
	} // end for
	return;
} // rotate()
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	08 95       	ret

0000041a <initStepperPos>:
			return; // Exit function when any button is pressed
		}
	}
} // waitToStart()

void initStepperPos(){
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
	// Rotates the stepper motor to find the average position between the two "edges" of hall effect sensor data,
	//  then rotates from there to the starting position. (Black bucket)
	stepperPos = 0;
 426:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <stepperPos+0x1>
 42a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stepperPos>
	int minStep = 0;
	int maxStep = 0;
	int flagHE = (PIND>>2)&1;
 42e:	89 b1       	in	r24, 0x09	; 9
 430:	82 fb       	bst	r24, 2
 432:	88 27       	eor	r24, r24
 434:	80 f9       	bld	r24, 0
 436:	c8 2f       	mov	r28, r24
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	d4 2f       	mov	r29, r20
 43c:	8e 01       	movw	r16, r28
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	e1 2c       	mov	r14, r1
 444:	f1 2c       	mov	r15, r1
	int lastVal = flagHE;
	
	while(stepperPos<200){ // Finding edges of the HE sensor range, then taking an average
		if(flagHE){
 446:	20 97       	sbiw	r28, 0x00	; 0
 448:	39 f0       	breq	.+14     	; 0x458 <initStepperPos+0x3e>
			if (lastVal != flagHE){
 44a:	c0 17       	cp	r28, r16
 44c:	d1 07       	cpc	r29, r17
 44e:	19 f0       	breq	.+6      	; 0x456 <initStepperPos+0x3c>
 450:	8e 01       	movw	r16, r28
 452:	79 01       	movw	r14, r18
 454:	01 c0       	rjmp	.+2      	; 0x458 <initStepperPos+0x3e>
 456:	8e 01       	movw	r16, r28
					maxStep = stepperPos;
				}
			}
			lastVal = flagHE;
		}
		rotate(1, 1);// 1 step cw
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	72 df       	rcall	.-284    	; 0x344 <rotate>
		flagHE = (PIND>>2)&1; // HE sensor is on pin D2
 460:	89 b1       	in	r24, 0x09	; 9
 462:	82 fb       	bst	r24, 2
 464:	88 27       	eor	r24, r24
 466:	80 f9       	bld	r24, 0
 468:	c8 2f       	mov	r28, r24
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	d5 2f       	mov	r29, r21
	int minStep = 0;
	int maxStep = 0;
	int flagHE = (PIND>>2)&1;
	int lastVal = flagHE;
	
	while(stepperPos<200){ // Finding edges of the HE sensor range, then taking an average
 46e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <stepperPos>
 472:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <stepperPos+0x1>
 476:	28 3c       	cpi	r18, 0xC8	; 200
 478:	31 05       	cpc	r19, r1
 47a:	2c f3       	brlt	.-54     	; 0x446 <initStepperPos+0x2c>
			lastVal = flagHE;
		}
		rotate(1, 1);// 1 step cw
		flagHE = (PIND>>2)&1; // HE sensor is on pin D2
	}
	if (maxStep < minStep) { // sensor values "wrap around" the bounds of 0-200 steps
 47c:	1e 14       	cp	r1, r14
 47e:	1f 04       	cpc	r1, r15
 480:	1c f4       	brge	.+6      	; 0x488 <initStepperPos+0x6e>
		maxStep += 200; // Extend range since it wraps around. It makes taking the average easier
 482:	88 ec       	ldi	r24, 0xC8	; 200
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <initStepperPos+0x72>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
	}
	stepperDestination = (maxStep + minStep)/2;
 48c:	8e 0d       	add	r24, r14
 48e:	9f 1d       	adc	r25, r15
 490:	99 23       	and	r25, r25
 492:	0c f4       	brge	.+2      	; 0x496 <initStepperPos+0x7c>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	95 95       	asr	r25
 498:	87 95       	ror	r24
	if (stepperDestination > 200){
 49a:	89 3c       	cpi	r24, 0xC9	; 201
 49c:	91 05       	cpc	r25, r1
 49e:	2c f4       	brge	.+10     	; 0x4aa <initStepperPos+0x90>
		flagHE = (PIND>>2)&1; // HE sensor is on pin D2
	}
	if (maxStep < minStep) { // sensor values "wrap around" the bounds of 0-200 steps
		maxStep += 200; // Extend range since it wraps around. It makes taking the average easier
	}
	stepperDestination = (maxStep + minStep)/2;
 4a0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <stepperDestination+0x1>
 4a4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <stepperDestination>
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <initStepperPos+0x9c>
	if (stepperDestination > 200){
		stepperDestination -= 200;
 4aa:	88 5c       	subi	r24, 0xC8	; 200
 4ac:	91 09       	sbc	r25, r1
 4ae:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <stepperDestination+0x1>
 4b2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <stepperDestination>
	}
	if(stepperDestination < stepperPos){
 4b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <stepperDestination>
 4ba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stepperDestination+0x1>
 4be:	82 17       	cp	r24, r18
 4c0:	93 07       	cpc	r25, r19
 4c2:	3c f4       	brge	.+14     	; 0x4d2 <initStepperPos+0xb8>
		rotate((stepperPos - stepperDestination), 0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	a9 01       	movw	r20, r18
 4c8:	48 1b       	sub	r20, r24
 4ca:	59 0b       	sbc	r21, r25
 4cc:	ca 01       	movw	r24, r20
 4ce:	3a df       	rcall	.-396    	; 0x344 <rotate>
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <initStepperPos+0xc0>
	}else{
		rotate((stepperDestination - stepperPos), 1);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	82 1b       	sub	r24, r18
 4d6:	93 0b       	sbc	r25, r19
 4d8:	35 df       	rcall	.-406    	; 0x344 <rotate>
	}
	stepperPos = 0; // Now we are centered on the black bucket, tare the value
 4da:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <stepperPos+0x1>
 4de:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stepperPos>
} // initStepperPos()
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	08 95       	ret

000004f0 <main>:
void updateDCMotorState(); // Pause/un-pause motor from turning
void mTimer(int count); // Delay function

// MAIN PROGRAM
int main(int argc, char *argv[])
{
 4f0:	8f 92       	push	r8
 4f2:	9f 92       	push	r9
 4f4:	af 92       	push	r10
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	28 97       	sbiw	r28, 0x08	; 8
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
	link *head; // Sets up head of queue
	link *tail;	// Sets up tail of queue
	setup(&head, &tail); // Set up queue
 518:	be 01       	movw	r22, r28
 51a:	6d 5f       	subi	r22, 0xFD	; 253
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	4a de       	rcall	.-876    	; 0x1b8 <setup>
	link *deQueuedLink; // Creating one pointer handle to be reused multiple times
	
	cli();	// Disables all interrupts
 524:	f8 94       	cli
	PORTB = 0b11110010; // Start motor CCW (inverted pins)
 526:	82 ef       	ldi	r24, 0xF2	; 242
 528:	85 b9       	out	0x05, r24	; 5
	TCCR1B |= _BV(CS10); // mTimer setup
 52a:	e1 e8       	ldi	r30, 0x81	; 129
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	81 60       	ori	r24, 0x01	; 1
 532:	80 83       	st	Z, r24
	
	DDRA = 0xFF; // Stepper motor driver pins
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; // DC motor driver pins
 538:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; // Output LEDs & LCD display
 53a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; // Button inputs
 53c:	1a b8       	out	0x0a, r1	; 10
	DDRF = 0x00; // Sensor input pins (RL, HE, OR, EX) 
 53e:	10 ba       	out	0x10, r1	; 16
	
	InitLCD(0); // Initialize LCD
 540:	80 e0       	ldi	r24, 0x00	; 0
	initStepperPos(); // Initialize stepper position
 542:	ff dd       	rcall	.-1026   	; 0x142 <InitLCD>
	initPWM(); // Start DC motor
 544:	6a df       	rcall	.-300    	; 0x41a <initStepperPos>
 546:	a6 de       	rcall	.-692    	; 0x294 <initPWM>
	setupADC(); // Set up reflectivity sensor
 548:	8d de       	rcall	.-742    	; 0x264 <setupADC>
 54a:	78 94       	sei
	// waitToStart(); // Waits for a button press to start. Maybe unnecessary
	sei(); // Enables interrupts
 54c:	0f 2e       	mov	r0, r31
				dequeue(&head,&tail,&deQueuedLink); // If so, pop item out of queue
				free(deQueuedLink);
				itemsSorted++;
				
				if(flagConveyorStopped){
					setDCMotorSpeed(speedDCMotor);
 54e:	f8 e0       	ldi	r31, 0x08	; 8
 550:	af 2e       	mov	r10, r31
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	bf 2e       	mov	r11, r31
 556:	f0 2d       	mov	r31, r0
 558:	0f 2e       	mov	r0, r31
			stepperDestination = firstValue(&head).value;
			if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
				if (abs(stepperDestination-stepperPos) > 100){
					stepperPauseTime = 10; // TODO these values are arbitrary. Need to use SPS method
				} else if(abs(stepperDestination-stepperPos) > 50){
					stepperPauseTime = 15; // TODO these values are arbitrary. Need to use SPS method
 55a:	ff e0       	ldi	r31, 0x0F	; 15
 55c:	cf 2e       	mov	r12, r31
 55e:	d1 2c       	mov	r13, r1
 560:	f0 2d       	mov	r31, r0
 562:	0f 2e       	mov	r0, r31
				} else{
					stepperPauseTime = 20; // TODO these values are arbitrary. Need to use SPS method
 564:	f4 e1       	ldi	r31, 0x14	; 20
 566:	ef 2e       	mov	r14, r31
 568:	f1 2c       	mov	r15, r1
 56a:	f0 2d       	mov	r31, r0
 56c:	0a e0       	ldi	r16, 0x0A	; 10
		// Are there still more items on the conveyor?
		if (!isEmpty(&head)){ // Check if queue is not empty
			stepperDestination = firstValue(&head).value;
			if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
				if (abs(stepperDestination-stepperPos) > 100){
					stepperPauseTime = 10; // TODO these values are arbitrary. Need to use SPS method
 56e:	10 e0       	ldi	r17, 0x00	; 0
 570:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flagProcessing>
	{
		
		// If object has left optical sensor, it's time to identify the material
		// Check - were we just processing a material?
		// Check OR==high? (optical sensor #1) (Pin D1)
		if (flagProcessing && ((PIND & 0x01)==0x01)){
 574:	88 23       	and	r24, r24
 576:	c9 f0       	breq	.+50     	; 0x5aa <main+0xba>
 578:	48 9b       	sbis	0x09, 0	; 9
 57a:	17 c0       	rjmp	.+46     	; 0x5aa <main+0xba>
			// Take optimal value from the ADC values, identify material, and add to FIFO
			link *newLink;
			initLink(&newLink);
 57c:	ce 01       	movw	r24, r28
 57e:	07 96       	adiw	r24, 0x07	; 7
 580:	22 de       	rcall	.-956    	; 0x1c6 <initLink>
 582:	8f 80       	ldd	r8, Y+7	; 0x07
			newLink->e.value = getMaterialType(ADC_result);
 584:	98 84       	ldd	r9, Y+8	; 0x08
 586:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ADC_result>
 58a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <ADC_result+0x1>
 58e:	a3 de       	rcall	.-698    	; 0x2d6 <getMaterialType>
 590:	f4 01       	movw	r30, r8
 592:	80 83       	st	Z, r24
 594:	ae 01       	movw	r20, r28
			enqueue(&head,&tail,&newLink); // Add item to FIFO
 596:	49 5f       	subi	r20, 0xF9	; 249
 598:	5f 4f       	sbci	r21, 0xFF	; 255
 59a:	be 01       	movw	r22, r28
 59c:	6d 5f       	subi	r22, 0xFD	; 253
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	1e de       	rcall	.-964    	; 0x1e2 <enqueue>
 5a6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <flagProcessing>
			flagProcessing = 0; // We have now finished processing the item
 5aa:	48 99       	sbic	0x09, 0	; 9
		}
		
		// Check EX==low? (optical sensor #2) (Pin D0)
		if ((PIND & 0x01)==0){
 5ac:	29 c0       	rjmp	.+82     	; 0x600 <main+0x110>
 5ae:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <stepperPos>
			if(stepperPos == stepperDestination){ // Check if stepper is in correct position yet
 5b2:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <stepperPos+0x1>
 5b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <stepperDestination>
 5ba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stepperDestination+0x1>
 5be:	28 17       	cp	r18, r24
 5c0:	39 07       	cpc	r19, r25
 5c2:	f1 f4       	brne	.+60     	; 0x600 <main+0x110>
 5c4:	ae 01       	movw	r20, r28
				dequeue(&head,&tail,&deQueuedLink); // If so, pop item out of queue
 5c6:	4b 5f       	subi	r20, 0xFB	; 251
 5c8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ca:	be 01       	movw	r22, r28
 5cc:	6d 5f       	subi	r22, 0xFD	; 253
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	24 de       	rcall	.-952    	; 0x21e <dequeue>
				free(deQueuedLink);
 5d6:	8d 81       	ldd	r24, Y+5	; 0x05
 5d8:	9e 81       	ldd	r25, Y+6	; 0x06
 5da:	cf d1       	rcall	.+926    	; 0x97a <free>
 5dc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
				itemsSorted++;
 5e0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 5ea:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 5ee:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <flagConveyorStopped>
				
				if(flagConveyorStopped){
 5f2:	88 23       	and	r24, r24
 5f4:	29 f0       	breq	.+10     	; 0x600 <main+0x110>
					setDCMotorSpeed(speedDCMotor);
 5f6:	f5 01       	movw	r30, r10
 5f8:	80 81       	ld	r24, Z
					flagConveyorStopped = 0;
 5fa:	87 bd       	out	0x27, r24	; 39
 5fc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <flagConveyorStopped>
				}
			}
		}
		
		// Are there still more items on the conveyor?
		if (!isEmpty(&head)){ // Check if queue is not empty
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	27 de       	rcall	.-946    	; 0x254 <isEmpty>
 606:	81 11       	cpse	r24, r1
 608:	30 c0       	rjmp	.+96     	; 0x66a <main+0x17a>
			stepperDestination = firstValue(&head).value;
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	1d de       	rcall	.-966    	; 0x24a <firstValue>
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <stepperDestination+0x1>
 616:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <stepperDestination>
 61a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <stepperPos>
			if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
 61e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <stepperPos+0x1>
 622:	82 17       	cp	r24, r18
 624:	93 07       	cpc	r25, r19
 626:	29 f1       	breq	.+74     	; 0x672 <main+0x182>
 628:	82 1b       	sub	r24, r18
				if (abs(stepperDestination-stepperPos) > 100){
 62a:	93 0b       	sbc	r25, r19
 62c:	9c 01       	movw	r18, r24
 62e:	22 f4       	brpl	.+8      	; 0x638 <main+0x148>
 630:	22 27       	eor	r18, r18
 632:	33 27       	eor	r19, r19
 634:	28 1b       	sub	r18, r24
 636:	39 0b       	sbc	r19, r25
 638:	25 36       	cpi	r18, 0x65	; 101
 63a:	31 05       	cpc	r19, r1
 63c:	2c f0       	brlt	.+10     	; 0x648 <main+0x158>
 63e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <stepperPauseTime+0x1>
					stepperPauseTime = 10; // TODO these values are arbitrary. Need to use SPS method
 642:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <stepperPauseTime>
 646:	0c c0       	rjmp	.+24     	; 0x660 <main+0x170>
 648:	23 33       	cpi	r18, 0x33	; 51
				} else if(abs(stepperDestination-stepperPos) > 50){
 64a:	31 05       	cpc	r19, r1
 64c:	2c f0       	brlt	.+10     	; 0x658 <main+0x168>
 64e:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <stepperPauseTime+0x1>
					stepperPauseTime = 15; // TODO these values are arbitrary. Need to use SPS method
 652:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <stepperPauseTime>
 656:	04 c0       	rjmp	.+8      	; 0x660 <main+0x170>
				} else{
					stepperPauseTime = 20; // TODO these values are arbitrary. Need to use SPS method
 658:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <stepperPauseTime+0x1>
 65c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <stepperPauseTime>
				}
				rotate(1,1); // rotate the stepper one step
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	6e de       	rcall	.-804    	; 0x344 <rotate>
 668:	04 c0       	rjmp	.+8      	; 0x672 <main+0x182>
				// TODO: possibly set a destination variable and have it rotate in the background using Timer2
				// TODO **** maybe change this later to rotate the optimal direction
				// Also need to figure out how to accelerate and decelerate. Probably requires doing fancier logic than "move one step".
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
 66a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <flagRampDown>
 66e:	81 11       	cpse	r24, r1
 670:	1a c0       	rjmp	.+52     	; 0x6a6 <main+0x1b6>
			displaySorted(&head, &tail); // Display info on LCD
			return 0; // Program end
		}
		
		// Check if we need to pause
		if (flagPause){ // "Pause" routine
 672:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <flagPause>
 676:	88 23       	and	r24, r24
 678:	09 f4       	brne	.+2      	; 0x67c <main+0x18c>
			mTimer(100); // Large de-bounce
 67a:	7a cf       	rjmp	.-268    	; 0x570 <main+0x80>
 67c:	84 e6       	ldi	r24, 0x64	; 100
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	41 de       	rcall	.-894    	; 0x304 <mTimer>
			flagPause = 0; // Reset pause flag
 682:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <flagPause>
			displaySorted(&head, &tail); // Display info on LCD
 686:	be 01       	movw	r22, r28
 688:	6d 5f       	subi	r22, 0xFD	; 253
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	ce 01       	movw	r24, r28
 68e:	01 96       	adiw	r24, 0x01	; 1
			
			while(!flagPause); // Wait for un-pause button to be pressed
 690:	11 de       	rcall	.-990    	; 0x2b4 <displaySorted>
 692:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <flagPause>
 696:	88 23       	and	r24, r24
			mTimer(100); // Another large de-bounce
 698:	e1 f3       	breq	.-8      	; 0x692 <main+0x1a2>
 69a:	84 e6       	ldi	r24, 0x64	; 100
 69c:	90 e0       	ldi	r25, 0x00	; 0
			flagPause = 0; // Reset pause flag
 69e:	32 de       	rcall	.-924    	; 0x304 <mTimer>
 6a0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <flagPause>
				// TODO: possibly set a destination variable and have it rotate in the background using Timer2
				// TODO **** maybe change this later to rotate the optimal direction
				// Also need to figure out how to accelerate and decelerate. Probably requires doing fancier logic than "move one step".
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
 6a4:	63 cf       	rjmp	.-314    	; 0x56c <main+0x7c>
 6a6:	88 ec       	ldi	r24, 0xC8	; 200
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	2c de       	rcall	.-936    	; 0x304 <mTimer>
	return;
} // rotate()

void setDCMotorSpeed(char speed){
	// Max speed is 0xFF (100% Duty Cycle)
	OCR0A = speed;
 6ac:	17 bc       	out	0x27, r1	; 39
				// Also need to figure out how to accelerate and decelerate. Probably requires doing fancier logic than "move one step".
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
			setDCMotorSpeed(0); // Stop conveyor motor
			cli(); // Stop all interrupts
 6ae:	f8 94       	cli
			displaySorted(&head, &tail); // Display info on LCD
 6b0:	be 01       	movw	r22, r28
 6b2:	6d 5f       	subi	r22, 0xFD	; 253
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	fc dd       	rcall	.-1032   	; 0x2b4 <displaySorted>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
			while(!flagPause); // Wait for un-pause button to be pressed
			mTimer(100); // Another large de-bounce
			flagPause = 0; // Reset pause flag
		}
	}
} // main()
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	28 96       	adiw	r28, 0x08	; 8
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	bf 90       	pop	r11
 6de:	af 90       	pop	r10
 6e0:	9f 90       	pop	r9
 6e2:	8f 90       	pop	r8
 6e4:	08 95       	ret

000006e6 <__vector_1>:
 6e6:	1f 92       	push	r1
} // mTimer()


// INTERRUPTS

ISR(INT0_vect){ // EX sensor
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
 6f8:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <stepperPos>
 6fc:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <stepperPos+0x1>
 700:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <stepperDestination>
 704:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stepperDestination+0x1>
 708:	28 17       	cp	r18, r24
 70a:	39 07       	cpc	r19, r25
 70c:	21 f0       	breq	.+8      	; 0x716 <__vector_1+0x30>
	return;
} // rotate()

void setDCMotorSpeed(char speed){
	// Max speed is 0xFF (100% Duty Cycle)
	OCR0A = speed;
 70e:	17 bc       	out	0x27, r1	; 39
// INTERRUPTS

ISR(INT0_vect){ // EX sensor
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
		setDCMotorSpeed(0); // Stop conveyor while we wait for the stepper to rotate to the correct position.
		flagConveyorStopped = 1; // Let other parts of program know we are stopped
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <flagConveyorStopped>
	}
}
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__vector_2>:

ISR(INT1_vect){ // OR sensor
 728:	1f 92       	push	r1
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	0f 92       	push	r0
 730:	11 24       	eor	r1, r1
 732:	0b b6       	in	r0, 0x3b	; 59
 734:	0f 92       	push	r0
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
	flagProcessing = 1; // Lets us know that we currently are trying to identify an object
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flagProcessing>
	ADC_result = sizeof(ADC_result); // Reset value to highest number
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ADC_result+0x1>
 74c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <ADC_result>
	ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 750:	ea e7       	ldi	r30, 0x7A	; 122
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	80 64       	ori	r24, 0x40	; 64
 758:	80 83       	st	Z, r24
}
 75a:	ff 91       	pop	r31
 75c:	ef 91       	pop	r30
 75e:	9f 91       	pop	r25
 760:	8f 91       	pop	r24
 762:	0f 90       	pop	r0
 764:	0b be       	out	0x3b, r0	; 59
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_4>:
/* NOTE: no interrupt for HE
ISR(INT2_vect){ // HE sensor
	flagHE = 1;
}*/

ISR(INT3_vect){ // Left button pressed
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	8f 93       	push	r24
	flagPause = 1;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flagPause>
}
 782:	8f 91       	pop	r24
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_5>:

ISR(INT4_vect){ // Right button pressed
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	8f 93       	push	r24
	flagRampDown = 1;
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flagRampDown>
}
 7a0:	8f 91       	pop	r24
 7a2:	0f 90       	pop	r0
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	0f 90       	pop	r0
 7a8:	1f 90       	pop	r1
 7aa:	18 95       	reti

000007ac <__vector_29>:

ISR(ADC_vect){ // Analog to Digital conversion
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	0b b6       	in	r0, 0x3b	; 59
 7b8:	0f 92       	push	r0
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	ef 93       	push	r30
 7c6:	ff 93       	push	r31
	if( ((ADCH<<8)+ADCL) < ADC_result){ // Want lowest value for highest reflectivity
 7c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 7cc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 7d0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <ADC_result>
 7d4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <ADC_result+0x1>
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	98 2f       	mov	r25, r24
 7dc:	88 27       	eor	r24, r24
 7de:	84 0f       	add	r24, r20
 7e0:	91 1d       	adc	r25, r1
 7e2:	82 17       	cp	r24, r18
 7e4:	93 07       	cpc	r25, r19
 7e6:	68 f4       	brcc	.+26     	; 0x802 <__vector_29+0x56>
		ADC_result = (ADCH<<8)+ADCL; // store ADC converted value to ADC_result 
 7e8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 7ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	98 2f       	mov	r25, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	82 0f       	add	r24, r18
 7f8:	91 1d       	adc	r25, r1
 7fa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ADC_result+0x1>
 7fe:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <ADC_result>
	}
	// Check OR==high? (optical sensor #1) (Pin D1)
	if((PIND & 0x01)==0x01){
 802:	48 9b       	sbis	0x09, 0	; 9
 804:	05 c0       	rjmp	.+10     	; 0x810 <__vector_29+0x64>
		ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 806:	ea e7       	ldi	r30, 0x7A	; 122
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	80 64       	ori	r24, 0x40	; 64
 80e:	80 83       	st	Z, r24
	}
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	0b be       	out	0x3b, r0	; 59
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <__vector_default>:

ISR(BADISR_vect){ // Bad ISR catch statement
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
	LCDClear();
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	67 dc       	rcall	.-1842   	; 0x10a <LCDByte>
	LCDWriteStringXY(1,1,"BAD ISR");
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	b3 dc       	rcall	.-1690   	; 0x1a8 <LCDGotoXY>
 842:	89 e1       	ldi	r24, 0x19	; 25
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	a1 dc       	rcall	.-1726   	; 0x18a <LCDWriteString>
 848:	ff cf       	rjmp	.-2      	; 0x848 <__vector_default+0x1c>

0000084a <malloc>:
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	91 05       	cpc	r25, r1
 856:	10 f4       	brcc	.+4      	; 0x85c <malloc+0x12>
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__flp>
 860:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__flp+0x1>
 864:	20 e0       	ldi	r18, 0x00	; 0
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	a0 e0       	ldi	r26, 0x00	; 0
 86a:	b0 e0       	ldi	r27, 0x00	; 0
 86c:	30 97       	sbiw	r30, 0x00	; 0
 86e:	19 f1       	breq	.+70     	; 0x8b6 <malloc+0x6c>
 870:	40 81       	ld	r20, Z
 872:	51 81       	ldd	r21, Z+1	; 0x01
 874:	02 81       	ldd	r16, Z+2	; 0x02
 876:	13 81       	ldd	r17, Z+3	; 0x03
 878:	48 17       	cp	r20, r24
 87a:	59 07       	cpc	r21, r25
 87c:	c8 f0       	brcs	.+50     	; 0x8b0 <malloc+0x66>
 87e:	84 17       	cp	r24, r20
 880:	95 07       	cpc	r25, r21
 882:	69 f4       	brne	.+26     	; 0x89e <malloc+0x54>
 884:	10 97       	sbiw	r26, 0x00	; 0
 886:	31 f0       	breq	.+12     	; 0x894 <malloc+0x4a>
 888:	12 96       	adiw	r26, 0x02	; 2
 88a:	0c 93       	st	X, r16
 88c:	12 97       	sbiw	r26, 0x02	; 2
 88e:	13 96       	adiw	r26, 0x03	; 3
 890:	1c 93       	st	X, r17
 892:	27 c0       	rjmp	.+78     	; 0x8e2 <malloc+0x98>
 894:	00 93 3a 01 	sts	0x013A, r16	; 0x80013a <__flp>
 898:	10 93 3b 01 	sts	0x013B, r17	; 0x80013b <__flp+0x1>
 89c:	22 c0       	rjmp	.+68     	; 0x8e2 <malloc+0x98>
 89e:	21 15       	cp	r18, r1
 8a0:	31 05       	cpc	r19, r1
 8a2:	19 f0       	breq	.+6      	; 0x8aa <malloc+0x60>
 8a4:	42 17       	cp	r20, r18
 8a6:	53 07       	cpc	r21, r19
 8a8:	18 f4       	brcc	.+6      	; 0x8b0 <malloc+0x66>
 8aa:	9a 01       	movw	r18, r20
 8ac:	bd 01       	movw	r22, r26
 8ae:	ef 01       	movw	r28, r30
 8b0:	df 01       	movw	r26, r30
 8b2:	f8 01       	movw	r30, r16
 8b4:	db cf       	rjmp	.-74     	; 0x86c <malloc+0x22>
 8b6:	21 15       	cp	r18, r1
 8b8:	31 05       	cpc	r19, r1
 8ba:	f9 f0       	breq	.+62     	; 0x8fa <malloc+0xb0>
 8bc:	28 1b       	sub	r18, r24
 8be:	39 0b       	sbc	r19, r25
 8c0:	24 30       	cpi	r18, 0x04	; 4
 8c2:	31 05       	cpc	r19, r1
 8c4:	80 f4       	brcc	.+32     	; 0x8e6 <malloc+0x9c>
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ca:	61 15       	cp	r22, r1
 8cc:	71 05       	cpc	r23, r1
 8ce:	21 f0       	breq	.+8      	; 0x8d8 <malloc+0x8e>
 8d0:	fb 01       	movw	r30, r22
 8d2:	93 83       	std	Z+3, r25	; 0x03
 8d4:	82 83       	std	Z+2, r24	; 0x02
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <malloc+0x96>
 8d8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__flp+0x1>
 8dc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__flp>
 8e0:	fe 01       	movw	r30, r28
 8e2:	32 96       	adiw	r30, 0x02	; 2
 8e4:	44 c0       	rjmp	.+136    	; 0x96e <malloc+0x124>
 8e6:	fe 01       	movw	r30, r28
 8e8:	e2 0f       	add	r30, r18
 8ea:	f3 1f       	adc	r31, r19
 8ec:	81 93       	st	Z+, r24
 8ee:	91 93       	st	Z+, r25
 8f0:	22 50       	subi	r18, 0x02	; 2
 8f2:	31 09       	sbc	r19, r1
 8f4:	39 83       	std	Y+1, r19	; 0x01
 8f6:	28 83       	st	Y, r18
 8f8:	3a c0       	rjmp	.+116    	; 0x96e <malloc+0x124>
 8fa:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__brkval>
 8fe:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__brkval+0x1>
 902:	23 2b       	or	r18, r19
 904:	41 f4       	brne	.+16     	; 0x916 <malloc+0xcc>
 906:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 90a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 90e:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <__brkval+0x1>
 912:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <__brkval>
 916:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 91a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 91e:	21 15       	cp	r18, r1
 920:	31 05       	cpc	r19, r1
 922:	41 f4       	brne	.+16     	; 0x934 <malloc+0xea>
 924:	2d b7       	in	r18, 0x3d	; 61
 926:	3e b7       	in	r19, 0x3e	; 62
 928:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 92c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 930:	24 1b       	sub	r18, r20
 932:	35 0b       	sbc	r19, r21
 934:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__brkval>
 938:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__brkval+0x1>
 93c:	e2 17       	cp	r30, r18
 93e:	f3 07       	cpc	r31, r19
 940:	a0 f4       	brcc	.+40     	; 0x96a <malloc+0x120>
 942:	2e 1b       	sub	r18, r30
 944:	3f 0b       	sbc	r19, r31
 946:	28 17       	cp	r18, r24
 948:	39 07       	cpc	r19, r25
 94a:	78 f0       	brcs	.+30     	; 0x96a <malloc+0x120>
 94c:	ac 01       	movw	r20, r24
 94e:	4e 5f       	subi	r20, 0xFE	; 254
 950:	5f 4f       	sbci	r21, 0xFF	; 255
 952:	24 17       	cp	r18, r20
 954:	35 07       	cpc	r19, r21
 956:	48 f0       	brcs	.+18     	; 0x96a <malloc+0x120>
 958:	4e 0f       	add	r20, r30
 95a:	5f 1f       	adc	r21, r31
 95c:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <__brkval+0x1>
 960:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <__brkval>
 964:	81 93       	st	Z+, r24
 966:	91 93       	st	Z+, r25
 968:	02 c0       	rjmp	.+4      	; 0x96e <malloc+0x124>
 96a:	e0 e0       	ldi	r30, 0x00	; 0
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	cf 01       	movw	r24, r30
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	08 95       	ret

0000097a <free>:
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	00 97       	sbiw	r24, 0x00	; 0
 980:	09 f4       	brne	.+2      	; 0x984 <free+0xa>
 982:	81 c0       	rjmp	.+258    	; 0xa86 <free+0x10c>
 984:	fc 01       	movw	r30, r24
 986:	32 97       	sbiw	r30, 0x02	; 2
 988:	13 82       	std	Z+3, r1	; 0x03
 98a:	12 82       	std	Z+2, r1	; 0x02
 98c:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <__flp>
 990:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <__flp+0x1>
 994:	10 97       	sbiw	r26, 0x00	; 0
 996:	81 f4       	brne	.+32     	; 0x9b8 <free+0x3e>
 998:	20 81       	ld	r18, Z
 99a:	31 81       	ldd	r19, Z+1	; 0x01
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
 9a0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__brkval>
 9a4:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__brkval+0x1>
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	51 f5       	brne	.+84     	; 0xa02 <free+0x88>
 9ae:	f0 93 39 01 	sts	0x0139, r31	; 0x800139 <__brkval+0x1>
 9b2:	e0 93 38 01 	sts	0x0138, r30	; 0x800138 <__brkval>
 9b6:	67 c0       	rjmp	.+206    	; 0xa86 <free+0x10c>
 9b8:	ed 01       	movw	r28, r26
 9ba:	20 e0       	ldi	r18, 0x00	; 0
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	ce 17       	cp	r28, r30
 9c0:	df 07       	cpc	r29, r31
 9c2:	40 f4       	brcc	.+16     	; 0x9d4 <free+0x5a>
 9c4:	4a 81       	ldd	r20, Y+2	; 0x02
 9c6:	5b 81       	ldd	r21, Y+3	; 0x03
 9c8:	9e 01       	movw	r18, r28
 9ca:	41 15       	cp	r20, r1
 9cc:	51 05       	cpc	r21, r1
 9ce:	f1 f0       	breq	.+60     	; 0xa0c <free+0x92>
 9d0:	ea 01       	movw	r28, r20
 9d2:	f5 cf       	rjmp	.-22     	; 0x9be <free+0x44>
 9d4:	d3 83       	std	Z+3, r29	; 0x03
 9d6:	c2 83       	std	Z+2, r28	; 0x02
 9d8:	40 81       	ld	r20, Z
 9da:	51 81       	ldd	r21, Z+1	; 0x01
 9dc:	84 0f       	add	r24, r20
 9de:	95 1f       	adc	r25, r21
 9e0:	c8 17       	cp	r28, r24
 9e2:	d9 07       	cpc	r29, r25
 9e4:	59 f4       	brne	.+22     	; 0x9fc <free+0x82>
 9e6:	88 81       	ld	r24, Y
 9e8:	99 81       	ldd	r25, Y+1	; 0x01
 9ea:	84 0f       	add	r24, r20
 9ec:	95 1f       	adc	r25, r21
 9ee:	02 96       	adiw	r24, 0x02	; 2
 9f0:	91 83       	std	Z+1, r25	; 0x01
 9f2:	80 83       	st	Z, r24
 9f4:	8a 81       	ldd	r24, Y+2	; 0x02
 9f6:	9b 81       	ldd	r25, Y+3	; 0x03
 9f8:	93 83       	std	Z+3, r25	; 0x03
 9fa:	82 83       	std	Z+2, r24	; 0x02
 9fc:	21 15       	cp	r18, r1
 9fe:	31 05       	cpc	r19, r1
 a00:	29 f4       	brne	.+10     	; 0xa0c <free+0x92>
 a02:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <__flp+0x1>
 a06:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <__flp>
 a0a:	3d c0       	rjmp	.+122    	; 0xa86 <free+0x10c>
 a0c:	e9 01       	movw	r28, r18
 a0e:	fb 83       	std	Y+3, r31	; 0x03
 a10:	ea 83       	std	Y+2, r30	; 0x02
 a12:	49 91       	ld	r20, Y+
 a14:	59 91       	ld	r21, Y+
 a16:	c4 0f       	add	r28, r20
 a18:	d5 1f       	adc	r29, r21
 a1a:	ec 17       	cp	r30, r28
 a1c:	fd 07       	cpc	r31, r29
 a1e:	61 f4       	brne	.+24     	; 0xa38 <free+0xbe>
 a20:	80 81       	ld	r24, Z
 a22:	91 81       	ldd	r25, Z+1	; 0x01
 a24:	84 0f       	add	r24, r20
 a26:	95 1f       	adc	r25, r21
 a28:	02 96       	adiw	r24, 0x02	; 2
 a2a:	e9 01       	movw	r28, r18
 a2c:	99 83       	std	Y+1, r25	; 0x01
 a2e:	88 83       	st	Y, r24
 a30:	82 81       	ldd	r24, Z+2	; 0x02
 a32:	93 81       	ldd	r25, Z+3	; 0x03
 a34:	9b 83       	std	Y+3, r25	; 0x03
 a36:	8a 83       	std	Y+2, r24	; 0x02
 a38:	e0 e0       	ldi	r30, 0x00	; 0
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	12 96       	adiw	r26, 0x02	; 2
 a3e:	8d 91       	ld	r24, X+
 a40:	9c 91       	ld	r25, X
 a42:	13 97       	sbiw	r26, 0x03	; 3
 a44:	00 97       	sbiw	r24, 0x00	; 0
 a46:	19 f0       	breq	.+6      	; 0xa4e <free+0xd4>
 a48:	fd 01       	movw	r30, r26
 a4a:	dc 01       	movw	r26, r24
 a4c:	f7 cf       	rjmp	.-18     	; 0xa3c <free+0xc2>
 a4e:	8d 91       	ld	r24, X+
 a50:	9c 91       	ld	r25, X
 a52:	11 97       	sbiw	r26, 0x01	; 1
 a54:	9d 01       	movw	r18, r26
 a56:	2e 5f       	subi	r18, 0xFE	; 254
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	82 0f       	add	r24, r18
 a5c:	93 1f       	adc	r25, r19
 a5e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__brkval>
 a62:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__brkval+0x1>
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	69 f4       	brne	.+26     	; 0xa86 <free+0x10c>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	29 f4       	brne	.+10     	; 0xa7a <free+0x100>
 a70:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__flp+0x1>
 a74:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__flp>
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <free+0x104>
 a7a:	13 82       	std	Z+3, r1	; 0x03
 a7c:	12 82       	std	Z+2, r1	; 0x02
 a7e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <__brkval+0x1>
 a82:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <__brkval>
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	08 95       	ret

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
