
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000e7e  00000f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080018e  0080018e  00000fa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002419  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000110a  00000000  00000000  00003581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1c  00000000  00000000  0000468b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000055a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000917  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c2  00000000  00000000  000062af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007571  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	de c4       	rjmp	.+2492   	; 0x9c2 <__vector_1>
   6:	00 00       	nop
   8:	5a c5       	rjmp	.+2740   	; 0xabe <__vector_2>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c5       	rjmp	.+2804   	; 0xb06 <__vector_4>
  12:	00 00       	nop
  14:	8d c5       	rjmp	.+2842   	; 0xb30 <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	6c c5       	rjmp	.+2776   	; 0xb4e <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e7       	ldi	r30, 0x7E	; 126
  ac:	fe e0       	ldi	r31, 0x0E	; 14
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 38       	cpi	r26, 0x8E	; 142
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ae e8       	ldi	r26, 0x8E	; 142
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a0 3b       	cpi	r26, 0xB0	; 176
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	81 d3       	rcall	.+1794   	; 0x7d2 <main>
  d0:	d4 c6       	rjmp	.+3496   	; 0xe7a <_exit>

000000d2 <__bad_interrupt>:
  d2:	79 c5       	rjmp	.+2802   	; 0xbc6 <__vector_default>

000000d4 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
  da:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
  dc:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	00 00       	nop

	
	do
	{

		SET_E();
  e0:	47 9a       	sbi	0x08, 7	; 8
  e2:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  e4:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  ec:	47 98       	cbi	0x08, 7	; 8
  ee:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  f0:	47 9a       	sbi	0x08, 7	; 8
  f2:	00 00       	nop
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  f4:	96 b1       	in	r25, 0x06	; 6
  f6:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  f8:	47 98       	cbi	0x08, 7	; 8
  fa:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
  fc:	88 23       	and	r24, r24
  fe:	84 f3       	brlt	.-32     	; 0xe0 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
 100:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	87 b9       	out	0x07, r24	; 7
 108:	08 95       	ret

0000010a <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 10a:	28 2f       	mov	r18, r24
 10c:	22 95       	swap	r18
 10e:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 110:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 112:	61 11       	cpse	r22, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <LCDByte+0x10>
	CLEAR_RS();
 116:	46 98       	cbi	0x08, 6	; 8
 118:	01 c0       	rjmp	.+2      	; 0x11c <LCDByte+0x12>
else
	SET_RS();
 11a:	46 9a       	sbi	0x08, 6	; 8
 11c:	00 00       	nop

_delay_us(0.500);		//tAS

SET_E();
 11e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 120:	98 b1       	in	r25, 0x08	; 8
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 126:	98 b9       	out	0x08, r25	; 8
 128:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 12a:	47 98       	cbi	0x08, 7	; 8
 12c:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 12e:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 130:	98 b1       	in	r25, 0x08	; 8
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 136:	88 b9       	out	0x08, r24	; 8
 138:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	ca cf       	rjmp	.-108    	; 0xd4 <LCDBusyLoop>
 140:	08 95       	ret

00000142 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8b e4       	ldi	r24, 0x4B	; 75
 148:	9d e1       	ldi	r25, 0x1D	; 29
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <InitLCD+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <InitLCD+0xe>
 150:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 152:	87 b1       	in	r24, 0x07	; 7
 154:	8f 60       	ori	r24, 0x0F	; 15
 156:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 158:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15a:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 15c:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 164:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 166:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 168:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 16c:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 16e:	41 9a       	sbi	0x08, 1	; 8
 170:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 172:	47 98       	cbi	0x08, 7	; 8
 174:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 176:	ae df       	rcall	.-164    	; 0xd4 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8c 2f       	mov	r24, r28
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	c5 df       	rcall	.-118    	; 0x10a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	c2 df       	rcall	.-124    	; 0x10a <LCDByte>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2 <LCDWriteString+0x18>
 196:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	b7 df       	rcall	.-146    	; 0x10a <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <LCDWriteInt+0xe>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <LCDWriteInt+0x10>
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	25 e0       	ldi	r18, 0x05	; 5
 1c6:	df 01       	movw	r26, r30
 1c8:	1d 92       	st	X+, r1
 1ca:	2a 95       	dec	r18
 1cc:	e9 f7       	brne	.-6      	; 0x1c8 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <LCDWriteInt+0x3e>
 1d2:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 1d4:	2a e0       	ldi	r18, 0x0A	; 10
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	07 d5       	rcall	.+2574   	; 0xbea <__divmodhi4>
 1dc:	82 93       	st	-Z, r24
	val=val/10;
 1de:	86 2f       	mov	r24, r22
 1e0:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	c9 f7       	brne	.-14     	; 0x1d8 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1e6:	bf ef       	ldi	r27, 0xFF	; 255
 1e8:	eb 16       	cp	r14, r27
 1ea:	fb 06       	cpc	r15, r27
 1ec:	69 f4       	brne	.+26     	; 0x208 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	81 11       	cpse	r24, r1
 1f2:	1d c0       	rjmp	.+58     	; 0x22e <LCDWriteInt+0x86>
 1f4:	fe 01       	movw	r30, r28
 1f6:	32 96       	adiw	r30, 0x02	; 2
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	81 91       	ld	r24, Z+
 202:	88 23       	and	r24, r24
 204:	d9 f3       	breq	.-10     	; 0x1fc <LCDWriteInt+0x54>
 206:	0f c0       	rjmp	.+30     	; 0x226 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 208:	05 e0       	ldi	r16, 0x05	; 5
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	0e 19       	sub	r16, r14
 20e:	1f 09       	sbc	r17, r15
 210:	0a c0       	rjmp	.+20     	; 0x226 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 212:	f8 01       	movw	r30, r16
 214:	81 91       	ld	r24, Z+
 216:	8f 01       	movw	r16, r30
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	76 df       	rcall	.-276    	; 0x10a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 21e:	0e 15       	cp	r16, r14
 220:	1f 05       	cpc	r17, r15
 222:	b9 f7       	brne	.-18     	; 0x212 <LCDWriteInt+0x6a>
 224:	11 c0       	rjmp	.+34     	; 0x248 <LCDWriteInt+0xa0>
 226:	05 30       	cpi	r16, 0x05	; 5
 228:	11 05       	cpc	r17, r1
 22a:	1c f0       	brlt	.+6      	; 0x232 <LCDWriteInt+0x8a>
 22c:	0d c0       	rjmp	.+26     	; 0x248 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8c 0f       	add	r24, r28
 238:	9d 1f       	adc	r25, r29
 23a:	08 0f       	add	r16, r24
 23c:	19 1f       	adc	r17, r25
 23e:	7e 01       	movw	r14, r28
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	e9 0e       	add	r14, r25
 244:	f1 1c       	adc	r15, r1
 246:	e5 cf       	rjmp	.-54     	; 0x212 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 260:	88 32       	cpi	r24, 0x28	; 40
 262:	28 f4       	brcc	.+10     	; 0x26e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 264:	61 11       	cpse	r22, r1
 266:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	4e cf       	rjmp	.-356    	; 0x10a <LCDByte>
 26e:	08 95       	ret

00000270 <setup>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
 270:	fc 01       	movw	r30, r24
 272:	11 82       	std	Z+1, r1	; 0x01
 274:	10 82       	st	Z, r1
 276:	fb 01       	movw	r30, r22
 278:	11 82       	std	Z+1, r1	; 0x01
 27a:	10 82       	st	Z, r1
 27c:	08 95       	ret

0000027e <initLink>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	d7 d4       	rcall	.+2478   	; 0xc38 <malloc>
 28a:	99 83       	std	Y+1, r25	; 0x01
 28c:	88 83       	st	Y, r24
 28e:	fc 01       	movw	r30, r24
 290:	12 82       	std	Z+2, r1	; 0x02
 292:	11 82       	std	Z+1, r1	; 0x01
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <enqueue>:
 29a:	db 01       	movw	r26, r22
 29c:	ed 91       	ld	r30, X+
 29e:	fc 91       	ld	r31, X
 2a0:	30 97       	sbiw	r30, 0x00	; 0
 2a2:	61 f0       	breq	.+24     	; 0x2bc <enqueue+0x22>
 2a4:	da 01       	movw	r26, r20
 2a6:	8d 91       	ld	r24, X+
 2a8:	9c 91       	ld	r25, X
 2aa:	11 97       	sbiw	r26, 0x01	; 1
 2ac:	92 83       	std	Z+2, r25	; 0x02
 2ae:	81 83       	std	Z+1, r24	; 0x01
 2b0:	8d 91       	ld	r24, X+
 2b2:	9c 91       	ld	r25, X
 2b4:	fb 01       	movw	r30, r22
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
 2ba:	08 95       	ret
 2bc:	da 01       	movw	r26, r20
 2be:	2d 91       	ld	r18, X+
 2c0:	3c 91       	ld	r19, X
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	db 01       	movw	r26, r22
 2d0:	8d 93       	st	X+, r24
 2d2:	9c 93       	st	X, r25
 2d4:	08 95       	ret

000002d6 <dequeue>:
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	da 01       	movw	r26, r20
 2de:	8d 93       	st	X+, r24
 2e0:	9c 93       	st	X, r25
 2e2:	a0 81       	ld	r26, Z
 2e4:	b1 81       	ldd	r27, Z+1	; 0x01
 2e6:	10 97       	sbiw	r26, 0x00	; 0
 2e8:	59 f0       	breq	.+22     	; 0x300 <dequeue+0x2a>
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	8d 91       	ld	r24, X+
 2ee:	9c 91       	ld	r25, X
 2f0:	12 97       	sbiw	r26, 0x02	; 2
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
 2f6:	89 2b       	or	r24, r25
 2f8:	19 f4       	brne	.+6      	; 0x300 <dequeue+0x2a>
 2fa:	fb 01       	movw	r30, r22
 2fc:	11 82       	std	Z+1, r1	; 0x01
 2fe:	10 82       	st	Z, r1
 300:	08 95       	ret

00000302 <firstValue>:
 302:	dc 01       	movw	r26, r24
 304:	ed 91       	ld	r30, X+
 306:	fc 91       	ld	r31, X
 308:	80 81       	ld	r24, Z
 30a:	08 95       	ret

0000030c <isEmpty>:
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
 30c:	fc 01       	movw	r30, r24
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	20 81       	ld	r18, Z
 312:	31 81       	ldd	r19, Z+1	; 0x01
 314:	23 2b       	or	r18, r19
 316:	09 f0       	breq	.+2      	; 0x31a <isEmpty+0xe>
 318:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
 31a:	08 95       	ret

0000031c <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 31c:	dc 01       	movw	r26, r24
 31e:	ed 91       	ld	r30, X+
 320:	fc 91       	ld	r31, X

	while(temp != NULL){
 322:	30 97       	sbiw	r30, 0x00	; 0
 324:	49 f0       	breq	.+18     	; 0x338 <size+0x1c>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 32a:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 32c:	01 80       	ldd	r0, Z+1	; 0x01
 32e:	f2 81       	ldd	r31, Z+2	; 0x02
 330:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 332:	30 97       	sbiw	r30, 0x00	; 0
 334:	d1 f7       	brne	.-12     	; 0x32a <size+0xe>
 336:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 33c:	08 95       	ret

0000033e <setupADC>:
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 33e:	ea e7       	ldi	r30, 0x7A	; 122
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	80 68       	ori	r24, 0x80	; 128
 346:	80 83       	st	Z, r24
 348:	80 81       	ld	r24, Z
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	80 83       	st	Z, r24
 34e:	ec e7       	ldi	r30, 0x7C	; 124
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 64       	ori	r24, 0x41	; 65
 356:	80 83       	st	Z, r24
 358:	ee e7       	ldi	r30, 0x7E	; 126
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <initPWM>:
 364:	84 b5       	in	r24, 0x24	; 36
 366:	81 60       	ori	r24, 0x01	; 1
 368:	84 bd       	out	0x24, r24	; 36
 36a:	84 b5       	in	r24, 0x24	; 36
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	84 bd       	out	0x24, r24	; 36
 370:	84 b5       	in	r24, 0x24	; 36
 372:	80 68       	ori	r24, 0x80	; 128
 374:	84 bd       	out	0x24, r24	; 36
 376:	85 b5       	in	r24, 0x25	; 37
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	85 bd       	out	0x25, r24	; 37
 37c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <speedDCMotor>
 380:	87 bd       	out	0x27, r24	; 39
 382:	08 95       	ret

00000384 <hwInterrupts>:
 384:	e8 9a       	sbi	0x1d, 0	; 29
 386:	e9 e6       	ldi	r30, 0x69	; 105
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
 390:	e9 9a       	sbi	0x1d, 1	; 29
 392:	80 81       	ld	r24, Z
 394:	8c 60       	ori	r24, 0x0C	; 12
 396:	80 83       	st	Z, r24
 398:	eb 9a       	sbi	0x1d, 3	; 29
 39a:	80 81       	ld	r24, Z
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	80 83       	st	Z, r24
 3a0:	ec 9a       	sbi	0x1d, 4	; 29
 3a2:	ea e6       	ldi	r30, 0x6A	; 106
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 83       	st	Z, r24
 3ac:	08 95       	ret

000003ae <getMaterialType>:
 3ae:	8d 3a       	cpi	r24, 0xAD	; 173
 3b0:	23 e0       	ldi	r18, 0x03	; 3
 3b2:	92 07       	cpc	r25, r18
 3b4:	54 f4       	brge	.+20     	; 0x3ca <getMaterialType+0x1c>
 3b6:	8c 3b       	cpi	r24, 0xBC	; 188
 3b8:	22 e0       	ldi	r18, 0x02	; 2
 3ba:	92 07       	cpc	r25, r18
 3bc:	4c f4       	brge	.+18     	; 0x3d0 <getMaterialType+0x22>
 3be:	8f 35       	cpi	r24, 0x5F	; 95
 3c0:	91 40       	sbci	r25, 0x01	; 1
 3c2:	4c f4       	brge	.+18     	; 0x3d6 <getMaterialType+0x28>
 3c4:	82 e3       	ldi	r24, 0x32	; 50
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	08 95       	ret
 3d0:	84 e6       	ldi	r24, 0x64	; 100
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	86 e9       	ldi	r24, 0x96	; 150
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	08 95       	ret

000003dc <countSorted>:
	}
} // updateDCMotorState()

void countSorted(int materialStep){
	switch(materialStep){
 3dc:	82 33       	cpi	r24, 0x32	; 50
 3de:	91 05       	cpc	r25, r1
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	1c f4       	brge	.+6      	; 0x3ea <countSorted+0xe>
 3e4:	89 2b       	or	r24, r25
 3e6:	41 f0       	breq	.+16     	; 0x3f8 <countSorted+0x1c>
 3e8:	08 95       	ret
 3ea:	84 36       	cpi	r24, 0x64	; 100
 3ec:	91 05       	cpc	r25, r1
 3ee:	c1 f0       	breq	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f0:	86 39       	cpi	r24, 0x96	; 150
 3f2:	91 05       	cpc	r25, r1
 3f4:	f9 f0       	breq	.+62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f6:	08 95       	ret
		case BLACK:
		numBlack++;
 3f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <numBlack>
 3fc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <numBlack+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <numBlack+0x1>
 406:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <numBlack>
		break;
 40a:	08 95       	ret
		case ALUM:
		numAlum++;
 40c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <numAlum>
 410:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <numAlum+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <numAlum+0x1>
 41a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <numAlum>
		break;
 41e:	08 95       	ret
		case WHITE:
		numWhite++;
 420:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <numWhite>
 424:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <numWhite+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <numWhite+0x1>
 42e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <numWhite>
		break;
 432:	08 95       	ret
		case STEEL:
		numSteel++;
 434:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <numSteel>
 438:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <numSteel+0x1>
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <numSteel+0x1>
 442:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <numSteel>
 446:	08 95       	ret

00000448 <mTimer>:
		break;
	}
} // countSorted()

void mTimer(int count){
 448:	ac 01       	movw	r20, r24
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
	TCCR1B |= _BV(WGM12); // Set Waveform Generation mode to Clear Timer on Compare Math mode
 44a:	e1 e8       	ldi	r30, 0x81	; 129
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	90 81       	ld	r25, Z
 450:	98 60       	ori	r25, 0x08	; 8
 452:	90 83       	st	Z, r25
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
 454:	88 ee       	ldi	r24, 0xE8	; 232
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 45c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0x0000; // Set initial value of Timer Counter
 460:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 464:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
 468:	b1 9a       	sbi	0x16, 1	; 22
	}
} // countSorted()

void mTimer(int count){
	// Delay by "n" milliseconds
	int i = 0; // Index that represents how many milliseconds have passed.
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 46e:	05 c0       	rjmp	.+10     	; 0x47a <mTimer+0x32>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 470:	b1 9b       	sbis	0x16, 1	; 22
 472:	fe cf       	rjmp	.-4      	; 0x470 <mTimer+0x28>
			TIFR1 |= _BV(OCF1A); // Clear interrupt flag
 474:	b1 9a       	sbi	0x16, 1	; 22
			i++; // Continue to next cycle
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
	OCR1A = 0x03e8; // Set Output Compare Register for 1000 cycles / 1 ms
	TCNT1 = 0x0000; // Set initial value of Timer Counter
	//TIMSK1 = TIMSK1 | 0x02; // Enable the output compare interrupt
	TIFR1 |= _BV(OCF1A); // Clear timer interrupt flag and begin timer.
	
	while (i<count){ // Poll timer until it reaches the number of cycle specified by the parameter
 47a:	24 17       	cp	r18, r20
 47c:	35 07       	cpc	r19, r21
 47e:	1c f4       	brge	.+6      	; 0x486 <mTimer+0x3e>
		if ((TIFR1 & 0x02)==0x02){ // Check if interrupt flag has triggered
 480:	b1 9b       	sbis	0x16, 1	; 22
 482:	f6 cf       	rjmp	.-20     	; 0x470 <mTimer+0x28>
 484:	f7 cf       	rjmp	.-18     	; 0x474 <mTimer+0x2c>
 486:	08 95       	ret

00000488 <displaySorted>:
	EIMSK |= _BV(INT4);
	EICRB |= _BV(ISC41); // Falling edge interrupt

} // hwInterrupts()

void displaySorted(link **head, link **tail){
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	8c 01       	movw	r16, r24
 496:	7b 01       	movw	r14, r22
	// Displays information on LCD about sorted items, and items in the queue
	
	// 1st "page" of display
	LCDClear();
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	36 de       	rcall	.-916    	; 0x10a <LCDByte>
	LCDHome();
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	33 de       	rcall	.-922    	; 0x10a <LCDByte>
	LCDWriteString("SRT FD PD"); // # Objects sorted, # Objects fully detected, # Objects partially detected
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	70 de       	rcall	.-800    	; 0x18a <LCDWriteString>
	
	LCDGotoXY(0,1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	d8 de       	rcall	.-592    	; 0x260 <LCDGotoXY>
 4b0:	64 e0       	ldi	r22, 0x04	; 4
	LCDWriteInt(itemsSorted,4); // Display number total items sorted
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <itemsSorted>
 4b8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <itemsSorted+0x1>
 4bc:	75 de       	rcall	.-790    	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(4,1);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	ce de       	rcall	.-612    	; 0x260 <LCDGotoXY>
	LCDWriteInt(size(head, tail)+itemsSorted,3); // Display number items fully detected //TODO**** Not sure if this is correct
 4c4:	b7 01       	movw	r22, r14
 4c6:	c8 01       	movw	r24, r16
 4c8:	29 df       	rcall	.-430    	; 0x31c <size>
 4ca:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <itemsSorted>
 4ce:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <itemsSorted+0x1>
 4d2:	63 e0       	ldi	r22, 0x03	; 3
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	82 0f       	add	r24, r18
 4d8:	93 1f       	adc	r25, r19
 4da:	66 de       	rcall	.-820    	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(7,1);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	87 e0       	ldi	r24, 0x07	; 7
 4e0:	bf de       	rcall	.-642    	; 0x260 <LCDGotoXY>
	LCDWriteInt(flagProcessing,3); // Display number items partially detected. There should only ever be 1 or 0.
 4e2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <flagProcessing>
 4e6:	63 e0       	ldi	r22, 0x03	; 3
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	5d de       	rcall	.-838    	; 0x1a8 <LCDWriteInt>
 4ee:	c4 e1       	ldi	r28, 0x14	; 20
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <displaySorted+0x76>
	int i = 2000;
	while((i>0) && (flagRampDown || flagPause)){ // Exits if the pause flag gets turned off
		 mTimer(100); // wait 2s
 4f4:	84 e6       	ldi	r24, 0x64	; 100
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a7 df       	rcall	.-178    	; 0x448 <mTimer>
 4fa:	21 97       	sbiw	r28, 0x01	; 1
 4fc:	41 f0       	breq	.+16     	; 0x50e <displaySorted+0x86>
	LCDWriteInt(size(head, tail)+itemsSorted,3); // Display number items fully detected //TODO**** Not sure if this is correct
	
	LCDGotoXY(7,1);
	LCDWriteInt(flagProcessing,3); // Display number items partially detected. There should only ever be 1 or 0.
	int i = 2000;
	while((i>0) && (flagRampDown || flagPause)){ // Exits if the pause flag gets turned off
 4fe:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagRampDown>
 502:	81 11       	cpse	r24, r1
 504:	f7 cf       	rjmp	.-18     	; 0x4f4 <displaySorted+0x6c>
 506:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
		 mTimer(100); // wait 2s
		 i -= 100;
	}
	
	// 2nd "page" of display
	LCDClear();
 50a:	81 11       	cpse	r24, r1
 50c:	f3 cf       	rjmp	.-26     	; 0x4f4 <displaySorted+0x6c>
 50e:	60 e0       	ldi	r22, 0x00	; 0
	LCDHome();
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	fb dd       	rcall	.-1034   	; 0x10a <LCDByte>
 514:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteString("BL AL WH ST #OB");
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	f8 dd       	rcall	.-1040   	; 0x10a <LCDByte>
 51a:	84 e1       	ldi	r24, 0x14	; 20
	
	LCDGotoXY(0,1);
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	35 de       	rcall	.-918    	; 0x18a <LCDWriteString>
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	80 e0       	ldi	r24, 0x00	; 0
	LCDWriteInt(numBlack,3); // Display number of black in the bin
 524:	9d de       	rcall	.-710    	; 0x260 <LCDGotoXY>
 526:	63 e0       	ldi	r22, 0x03	; 3
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <numBlack>
 52e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <numBlack+0x1>

	LCDGotoXY(3,1);
 532:	3a de       	rcall	.-908    	; 0x1a8 <LCDWriteInt>
 534:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteInt(numAlum,3); // Display number of aluminum in the bin
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	93 de       	rcall	.-730    	; 0x260 <LCDGotoXY>
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <numAlum>
 542:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <numAlum+0x1>

	LCDGotoXY(6,1);
 546:	30 de       	rcall	.-928    	; 0x1a8 <LCDWriteInt>
 548:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteInt(numWhite,3); // Display number of white in the bin
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	89 de       	rcall	.-750    	; 0x260 <LCDGotoXY>
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <numWhite>

	LCDGotoXY(9,1);
 556:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <numWhite+0x1>
 55a:	26 de       	rcall	.-948    	; 0x1a8 <LCDWriteInt>
 55c:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteInt(numSteel,3); // Display number of steel in the bin
 55e:	89 e0       	ldi	r24, 0x09	; 9
 560:	7f de       	rcall	.-770    	; 0x260 <LCDGotoXY>
 562:	63 e0       	ldi	r22, 0x03	; 3
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <numSteel>
 56a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <numSteel+0x1>

	LCDGotoXY(13,1);
 56e:	1c de       	rcall	.-968    	; 0x1a8 <LCDWriteInt>
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteInt(size(head,tail),3); // Indicate how many detected items are on the belt on the belt right now
 574:	75 de       	rcall	.-790    	; 0x260 <LCDGotoXY>
 576:	b7 01       	movw	r22, r14
 578:	c8 01       	movw	r24, r16
 57a:	d0 de       	rcall	.-608    	; 0x31c <size>
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	13 de       	rcall	.-986    	; 0x1a8 <LCDWriteInt>
 582:	ce e1       	ldi	r28, 0x1E	; 30
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	05 c0       	rjmp	.+10     	; 0x592 <displaySorted+0x10a>
 588:	84 e6       	ldi	r24, 0x64	; 100
	i = 3000;
	while((i>0) && (flagRampDown || flagPause)){ // Exits if the pause flag gets turned off
		mTimer(100); // wait 3s
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	5d df       	rcall	.-326    	; 0x448 <mTimer>
 58e:	21 97       	sbiw	r28, 0x01	; 1
 590:	41 f0       	breq	.+16     	; 0x5a2 <displaySorted+0x11a>
 592:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagRampDown>
	LCDWriteInt(numSteel,3); // Display number of steel in the bin

	LCDGotoXY(13,1);
	LCDWriteInt(size(head,tail),3); // Indicate how many detected items are on the belt on the belt right now
	i = 3000;
	while((i>0) && (flagRampDown || flagPause)){ // Exits if the pause flag gets turned off
 596:	81 11       	cpse	r24, r1
 598:	f7 cf       	rjmp	.-18     	; 0x588 <displaySorted+0x100>
 59a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
 59e:	81 11       	cpse	r24, r1
 5a0:	f3 cf       	rjmp	.-26     	; 0x588 <displaySorted+0x100>
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
		mTimer(100); // wait 3s
		i -= 100;
	}
} // displaySorted()
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	08 95       	ret

000005b0 <rotate>:
 5b0:	9f 92       	push	r9
 5b2:	af 92       	push	r10
		return ALUM; // Aluminum
	}
	
} // getMaterialType()

void rotate(int count, char cw /* 1 rotates cw, 0 rotates ccw */){
 5b4:	bf 92       	push	r11
 5b6:	cf 92       	push	r12
 5b8:	df 92       	push	r13
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
	const static int stepperPauseLong = 20; // Slowest speed
	const static int stepperPauseShort = 10; // Fastest speed
	const static int bufferSteps = (stepperPauseLong - stepperPauseShort); // # of steps from destination when stepper starts to slow down
	
	int i;
	count = abs(count); // Only take magnitude of "count"
 5c6:	ec 01       	movw	r28, r24
 5c8:	99 23       	and	r25, r25
 5ca:	24 f4       	brge	.+8      	; 0x5d4 <rotate+0x24>
 5cc:	cc 27       	eor	r28, r28
 5ce:	dd 27       	eor	r29, r29
 5d0:	c8 1b       	sub	r28, r24
 5d2:	d9 0b       	sbc	r29, r25
	for(i=0; i<count; i++){ // Runs for "count" steps
 5d4:	1c 16       	cp	r1, r28
 5d6:	1d 06       	cpc	r1, r29
 5d8:	0c f0       	brlt	.+2      	; 0x5dc <rotate+0x2c>
 5da:	ab c0       	rjmp	.+342    	; 0x732 <rotate+0x182>
 5dc:	96 2e       	mov	r9, r22
 5de:	a1 2c       	mov	r10, r1
 5e0:	b1 2c       	mov	r11, r1
				stepperPos += 1;
			}
			} else{
			step--;
			if((stepperPos-1)<0){ // Cover position underflow condition
				stepperPos = 199;
 5e2:	0f 2e       	mov	r0, r31
 5e4:	f7 ec       	ldi	r31, 0xC7	; 199
 5e6:	cf 2e       	mov	r12, r31
 5e8:	d1 2c       	mov	r13, r1
 5ea:	f0 2d       	mov	r31, r0
		
		// Stepper Micro-steps
		if(step>3){ // Step overflow condition
			step = 0;
			} else if(step<0){ // Step underflow condition
			step = 3;
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f3 e0       	ldi	r31, 0x03	; 3
 5f0:	ef 2e       	mov	r14, r31
 5f2:	f1 2c       	mov	r15, r1
 5f4:	f0 2d       	mov	r31, r0
		int dx = stepperDestination-stepperPos;
		if (dx<0){
			dx = -dx;
		}
		if (dx > 100){
			dx = 200 - dx;
 5f6:	08 ec       	ldi	r16, 0xC8	; 200
 5f8:	10 e0       	ldi	r17, 0x00	; 0
	
	int i;
	count = abs(count); // Only take magnitude of "count"
	for(i=0; i<count; i++){ // Runs for "count" steps
		// Stepper Position
		if (cw){ // Advance to next step in specified direction
 5fa:	99 20       	and	r9, r9
 5fc:	01 f1       	breq	.+64     	; 0x63e <rotate+0x8e>
			step++;
 5fe:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 602:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <step+0x1>
 60c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <step>
			if((stepperPos+1)>=200){ // Cover position overflow condition
 610:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 614:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	88 3c       	cpi	r24, 0xC8	; 200
 61c:	91 05       	cpc	r25, r1
 61e:	2c f0       	brlt	.+10     	; 0x62a <rotate+0x7a>
				stepperPos = 0;
 620:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 624:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
 628:	27 c0       	rjmp	.+78     	; 0x678 <rotate+0xc8>
				}else{
				stepperPos += 1;
 62a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 62e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <stepperPos+0x1>
 638:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <stepperPos>
 63c:	1d c0       	rjmp	.+58     	; 0x678 <rotate+0xc8>
			}
			} else{
			step--;
 63e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 642:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <step+0x1>
 64c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <step>
			if((stepperPos-1)<0){ // Cover position underflow condition
 650:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 654:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	2a f4       	brpl	.+10     	; 0x666 <rotate+0xb6>
				stepperPos = 199;
 65c:	d0 92 9f 01 	sts	0x019F, r13	; 0x80019f <stepperPos+0x1>
 660:	c0 92 9e 01 	sts	0x019E, r12	; 0x80019e <stepperPos>
 664:	09 c0       	rjmp	.+18     	; 0x678 <rotate+0xc8>
				}else{
				stepperPos -= 1;
 666:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <stepperPos>
 66a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <stepperPos+0x1>
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <stepperPos+0x1>
 674:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <stepperPos>
			}
		}
		
		// Stepper Micro-steps
		if(step>3){ // Step overflow condition
 678:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 67c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 680:	04 97       	sbiw	r24, 0x04	; 4
 682:	2c f0       	brlt	.+10     	; 0x68e <rotate+0xde>
			step = 0;
 684:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <step+0x1>
 688:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <step>
 68c:	0a c0       	rjmp	.+20     	; 0x6a2 <rotate+0xf2>
			} else if(step<0){ // Step underflow condition
 68e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <step>
 692:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <step+0x1>
 696:	99 23       	and	r25, r25
 698:	24 f4       	brge	.+8      	; 0x6a2 <rotate+0xf2>
			step = 3;
 69a:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <step+0x1>
 69e:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <step>
		} // end if
		
		// Find how far we are from the destination
		// This code is repeated elsewhere in the program. This would run faster if we instead only computed it once, but that will take restructuring.
		int dx = stepperDestination-stepperPos;
 6a2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 6a6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 6aa:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 6ae:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 6b2:	82 1b       	sub	r24, r18
 6b4:	93 0b       	sbc	r25, r19
 6b6:	9c 01       	movw	r18, r24
 6b8:	22 f4       	brpl	.+8      	; 0x6c2 <rotate+0x112>
 6ba:	22 27       	eor	r18, r18
 6bc:	33 27       	eor	r19, r19
 6be:	28 1b       	sub	r18, r24
 6c0:	39 0b       	sbc	r19, r25
 6c2:	a9 01       	movw	r20, r18
		if (dx<0){
			dx = -dx;
		}
		if (dx > 100){
 6c4:	25 36       	cpi	r18, 0x65	; 101
 6c6:	31 05       	cpc	r19, r1
 6c8:	1c f0       	brlt	.+6      	; 0x6d0 <rotate+0x120>
			dx = 200 - dx;
 6ca:	a8 01       	movw	r20, r16
 6cc:	42 1b       	sub	r20, r18
 6ce:	53 0b       	sbc	r21, r19
		}
		
		// Acceleration & De-acceleration
		if ((stepperPauseTime > stepperPauseShort) && (dx > bufferSteps)){ // Acceleration zone
 6d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepperPauseTime>
 6d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepperPauseTime+0x1>
 6d8:	8b 30       	cpi	r24, 0x0B	; 11
 6da:	91 05       	cpc	r25, r1
 6dc:	4c f0       	brlt	.+18     	; 0x6f0 <rotate+0x140>
 6de:	4b 30       	cpi	r20, 0x0B	; 11
 6e0:	51 05       	cpc	r21, r1
 6e2:	34 f0       	brlt	.+12     	; 0x6f0 <rotate+0x140>
			stepperPauseTime -= 1; // Speed up (delay less time)
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepperPauseTime+0x1>
 6ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepperPauseTime>
 6ee:	0b c0       	rjmp	.+22     	; 0x706 <rotate+0x156>
		}else if((stepperPauseTime < stepperPauseLong) && (dx < bufferSteps)){ // De-acceleration zone
 6f0:	84 31       	cpi	r24, 0x14	; 20
 6f2:	91 05       	cpc	r25, r1
 6f4:	44 f4       	brge	.+16     	; 0x706 <rotate+0x156>
 6f6:	4a 30       	cpi	r20, 0x0A	; 10
 6f8:	51 05       	cpc	r21, r1
 6fa:	2c f4       	brge	.+10     	; 0x706 <rotate+0x156>
			stepperPauseTime += 1; // Speed down (delay more time)
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepperPauseTime+0x1>
 702:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepperPauseTime>
		}
		
		// Stepper Movement
		PORTA = step_array[step]; // Take next step for stepper motor
 706:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <step>
 70a:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <step+0x1>
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	ea 57       	subi	r30, 0x7A	; 122
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	80 81       	ld	r24, Z
 718:	82 b9       	out	0x02, r24	; 2
		mTimer(stepperPauseTime); // Variable speed pause	
 71a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepperPauseTime>
 71e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepperPauseTime+0x1>
 722:	92 de       	rcall	.-732    	; 0x448 <mTimer>
	const static int stepperPauseShort = 10; // Fastest speed
	const static int bufferSteps = (stepperPauseLong - stepperPauseShort); // # of steps from destination when stepper starts to slow down
	
	int i;
	count = abs(count); // Only take magnitude of "count"
	for(i=0; i<count; i++){ // Runs for "count" steps
 724:	8f ef       	ldi	r24, 0xFF	; 255
 726:	a8 1a       	sub	r10, r24
 728:	b8 0a       	sbc	r11, r24
 72a:	ca 15       	cp	r28, r10
 72c:	db 05       	cpc	r29, r11
 72e:	09 f0       	breq	.+2      	; 0x732 <rotate+0x182>
 730:	64 cf       	rjmp	.-312    	; 0x5fa <rotate+0x4a>
		PORTA = step_array[step]; // Take next step for stepper motor
		mTimer(stepperPauseTime); // Variable speed pause	
		// mTimer(20); // Constant stepper speed
		
	} // end for
} // rotate()
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	9f 90       	pop	r9
 748:	08 95       	ret

0000074a <initStepperPos>:
		}
	}
} // waitToStart()

void initStepperPos(){
	LCDClear();
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	dd dc       	rcall	.-1606   	; 0x10a <LCDByte>
	LCDHome();
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	da dc       	rcall	.-1612   	; 0x10a <LCDByte>
	LCDWriteString("Searching...");
 756:	84 e2       	ldi	r24, 0x24	; 36
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	17 dd       	rcall	.-1490   	; 0x18a <LCDWriteString>
	// Rotates the stepper motor to find the average position between the two "edges" of hall effect sensor data,
	//  then rotates from there to the starting position. (Black bucket)
	stepperPos = 0;
 75c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 760:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
	while((PIND>>2)&1){ // loop while not at black bucket position
 764:	4a 9b       	sbis	0x09, 2	; 9
 766:	06 c0       	rjmp	.+12     	; 0x774 <initStepperPos+0x2a>
		rotate(1, 1); // 1 step cw
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	20 df       	rcall	.-448    	; 0x5b0 <rotate>
	LCDHome();
	LCDWriteString("Searching...");
	// Rotates the stepper motor to find the average position between the two "edges" of hall effect sensor data,
	//  then rotates from there to the starting position. (Black bucket)
	stepperPos = 0;
	while((PIND>>2)&1){ // loop while not at black bucket position
 770:	4a 99       	sbic	0x09, 2	; 9
		rotate(1, 1); // 1 step cw
	}
	rotate(4,0); // 4 steps ccw correction
 772:	fa cf       	rjmp	.-12     	; 0x768 <initStepperPos+0x1e>
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	84 e0       	ldi	r24, 0x04	; 4
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	1a df       	rcall	.-460    	; 0x5b0 <rotate>
	stepperPos = 0; // Now we are centered on the black bucket, tare the value
 77c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <stepperPos+0x1>
 780:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <stepperPos>
	
	LCDClear();
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
	LCDHome();
 788:	c0 dc       	rcall	.-1664   	; 0x10a <LCDByte>
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	bd dc       	rcall	.-1670   	; 0x10a <LCDByte>
	LCDWriteString("Program Start");
 790:	81 e3       	ldi	r24, 0x31	; 49
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	fa cc       	rjmp	.-1548   	; 0x18a <LCDWriteString>
 796:	08 95       	ret

00000798 <getMaterialName>:
 798:	82 33       	cpi	r24, 0x32	; 50
		} //end if
	} //end while
} // mTimer()

char* getMaterialName(int materialStep){ // temporary test function
	switch(materialStep){
 79a:	91 05       	cpc	r25, r1
 79c:	71 f0       	breq	.+28     	; 0x7ba <getMaterialName+0x22>
 79e:	1c f4       	brge	.+6      	; 0x7a6 <getMaterialName+0xe>
 7a0:	89 2b       	or	r24, r25
 7a2:	a1 f0       	breq	.+40     	; 0x7cc <getMaterialName+0x34>
 7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <getMaterialName+0x2e>
 7a6:	84 36       	cpi	r24, 0x64	; 100
 7a8:	91 05       	cpc	r25, r1
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <getMaterialName+0x1c>
 7ac:	86 39       	cpi	r24, 0x96	; 150
 7ae:	91 05       	cpc	r25, r1
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <getMaterialName+0x28>
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <getMaterialName+0x2e>
		case BLACK:
		return "BLACK";
		break;
		case WHITE:
		return "WHITE";
 7b4:	85 e4       	ldi	r24, 0x45	; 69
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	08 95       	ret
		break;
		case ALUM:
		return "ALUM";
 7ba:	8b e4       	ldi	r24, 0x4B	; 75
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	08 95       	ret
		break;
		case STEEL:
		return "STEEL";
 7c0:	80 e5       	ldi	r24, 0x50	; 80
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	08 95       	ret
		break;
	}
	return "";
 7c6:	80 e6       	ldi	r24, 0x60	; 96
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	08 95       	ret
} // mTimer()

char* getMaterialName(int materialStep){ // temporary test function
	switch(materialStep){
		case BLACK:
		return "BLACK";
 7cc:	8f e3       	ldi	r24, 0x3F	; 63
 7ce:	91 e0       	ldi	r25, 0x01	; 1
		case STEEL:
		return "STEEL";
		break;
	}
	return "";
}
 7d0:	08 95       	ret

000007d2 <main>:
//test functions
char* getMaterialName(int materialStep);

// MAIN PROGRAM
int main(int argc, char *argv[])
{
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <main+0xe>
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
	setup(&head, &tail); // Set up queue
 7e4:	64 ea       	ldi	r22, 0xA4	; 164
 7e6:	71 e0       	ldi	r23, 0x01	; 1
 7e8:	86 ea       	ldi	r24, 0xA6	; 166
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	41 dd       	rcall	.-1406   	; 0x270 <setup>
	
	cli();	// Disables all interrupts
 7ee:	f8 94       	cli
	TCCR1B |= _BV(CS10); // mTimer setup
 7f0:	e1 e8       	ldi	r30, 0x81	; 129
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	81 60       	ori	r24, 0x01	; 1
 7f8:	80 83       	st	Z, r24
	
	DDRA = 0xFF; // Stepper motor driver pins
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; // DC motor driver pins
 7fe:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; // Output LEDs & LCD display
 800:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; // Button inputs and EX, OR, HE
 802:	1a b8       	out	0x0a, r1	; 10
	DDRF = 0x00; // Sensor input pin (RL on F1) 
 804:	10 ba       	out	0x10, r1	; 16
	
	InitLCD(0); // Initialize LCD
 806:	80 e0       	ldi	r24, 0x00	; 0
	initStepperPos(); // Initialize stepper position
 808:	9c dc       	rcall	.-1736   	; 0x142 <InitLCD>
 80a:	9f df       	rcall	.-194    	; 0x74a <initStepperPos>
	initPWM(); // Set up DC motor PWM
 80c:	ab dd       	rcall	.-1194   	; 0x364 <initPWM>
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 80e:	82 e0       	ldi	r24, 0x02	; 2
 810:	85 b9       	out	0x05, r24	; 5
	
	InitLCD(0); // Initialize LCD
	initStepperPos(); // Initialize stepper position
	initPWM(); // Set up DC motor PWM
	updateDCMotorState(1); // Turn on DC motor
	setupADC(); // Set up reflectivity sensor
 812:	95 dd       	rcall	.-1238   	; 0x33e <setupADC>
 814:	b7 dd       	rcall	.-1170   	; 0x384 <hwInterrupts>
	hwInterrupts(); // Set up hardware interrupts
 816:	78 94       	sei
 818:	08 ec       	ldi	r16, 0xC8	; 200
	// waitToStart(); // Waits for a button press to start. Maybe unnecessary
	sei(); // Enables interrupts
 81a:	10 e0       	ldi	r17, 0x00	; 0
				if (dx<0){
					dx = -dx;
					cw = !cw;
				}
				if (dx > 100){
					dx = 200 - dx;
 81c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <flagProcessing>
	{
		
		// If object has left optical sensor, it's time to identify the material
		// Check - were we just processing a material?
		// Check OR==low? (not being activated) (optical sensor #1) (Pin D1)
		if (flagProcessing && ((PIND & 0x02)==0x00)){
 820:	88 23       	and	r24, r24
 822:	59 f1       	breq	.+86     	; 0x87a <main+0xa8>
 824:	49 99       	sbic	0x09, 1	; 9
 826:	29 c0       	rjmp	.+82     	; 0x87a <main+0xa8>
 828:	ce 01       	movw	r24, r28
			// Take optimal value from the ADC values, identify material, and add to FIFO
			link *newLink;
			initLink(&newLink);
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	28 dd       	rcall	.-1456   	; 0x27e <initLink>
 82e:	e9 80       	ldd	r14, Y+1	; 0x01
			newLink->e.value = getMaterialType(ADC_result);
 830:	fa 80       	ldd	r15, Y+2	; 0x02
 832:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 836:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 83a:	b9 dd       	rcall	.-1166   	; 0x3ae <getMaterialType>
 83c:	f7 01       	movw	r30, r14
 83e:	80 83       	st	Z, r24
 840:	ae 01       	movw	r20, r28
			enqueue(&head,&tail,&newLink); // Add item to FIFO
 842:	4f 5f       	subi	r20, 0xFF	; 255
 844:	5f 4f       	sbci	r21, 0xFF	; 255
 846:	64 ea       	ldi	r22, 0xA4	; 164
 848:	71 e0       	ldi	r23, 0x01	; 1
 84a:	86 ea       	ldi	r24, 0xA6	; 166
 84c:	91 e0       	ldi	r25, 0x01	; 1
 84e:	25 dd       	rcall	.-1462   	; 0x29a <enqueue>
			flagProcessing = 0; // We have now finished processing the item
 850:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <flagProcessing>
			
			// Testing, verbose code. TODO remove later ****
			LCDClear();
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	81 e0       	ldi	r24, 0x01	; 1
			LCDHome();
 858:	58 dc       	rcall	.-1872   	; 0x10a <LCDByte>
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	82 e0       	ldi	r24, 0x02	; 2
			LCDWriteString("Material: ");
 85e:	55 dc       	rcall	.-1878   	; 0x10a <LCDByte>
 860:	86 e5       	ldi	r24, 0x56	; 86
			LCDGotoXY(10,0);
 862:	91 e0       	ldi	r25, 0x01	; 1
 864:	92 dc       	rcall	.-1756   	; 0x18a <LCDWriteString>
 866:	60 e0       	ldi	r22, 0x00	; 0
			LCDWriteString(getMaterialName(getMaterialType(ADC_result)));
 868:	8a e0       	ldi	r24, 0x0A	; 10
 86a:	fa dc       	rcall	.-1548   	; 0x260 <LCDGotoXY>
 86c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 870:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 874:	9c dd       	rcall	.-1224   	; 0x3ae <getMaterialType>
 876:	90 df       	rcall	.-224    	; 0x798 <getMaterialName>
 878:	88 dc       	rcall	.-1776   	; 0x18a <LCDWriteString>
		}
				
		// Are there still more items on the conveyor?
		if (!isEmpty(&head)){ // Check if queue still has items in it
 87a:	86 ea       	ldi	r24, 0xA6	; 166
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	46 dd       	rcall	.-1396   	; 0x30c <isEmpty>
 880:	81 11       	cpse	r24, r1
 882:	31 c0       	rjmp	.+98     	; 0x8e6 <main+0x114>
 884:	48 9b       	sbis	0x09, 0	; 9
			if (PIND & 1){ // Ensure that the last sorted item has left EX (which is active low)			
 886:	33 c0       	rjmp	.+102    	; 0x8ee <main+0x11c>
 888:	86 ea       	ldi	r24, 0xA6	; 166
				stepperDestination = firstValue(&head).value;
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	3a dd       	rcall	.-1420   	; 0x302 <firstValue>
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <stepperDestination+0x1>
 894:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <stepperDestination>
 898:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
				if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
 89c:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 8a0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 8a4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	01 f1       	breq	.+64     	; 0x8ee <main+0x11c>
 8ae:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
					char cw = 1; // Clockwise 1, ccw if 0.
					int dx = stepperDestination-stepperPos;
 8b2:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 8b6:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 8ba:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 8be:	82 1b       	sub	r24, r18
 8c0:	93 0b       	sbc	r25, r19
 8c2:	2a f4       	brpl	.+10     	; 0x8ce <main+0xfc>
					if (dx<0){
 8c4:	91 95       	neg	r25
						dx = -dx; // same as abs()
 8c6:	81 95       	neg	r24
 8c8:	91 09       	sbc	r25, r1
 8ca:	60 e0       	ldi	r22, 0x00	; 0
						cw = !cw; // Change the direction because of negative
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <main+0xfe>
 8ce:	61 e0       	ldi	r22, 0x01	; 1
		// Are there still more items on the conveyor?
		if (!isEmpty(&head)){ // Check if queue still has items in it
			if (PIND & 1){ // Ensure that the last sorted item has left EX (which is active low)			
				stepperDestination = firstValue(&head).value;
				if(stepperPos != stepperDestination){ // Check if stepper has the correct bucket position
					char cw = 1; // Clockwise 1, ccw if 0.
 8d0:	85 36       	cpi	r24, 0x65	; 101
					int dx = stepperDestination-stepperPos;
					if (dx<0){
						dx = -dx; // same as abs()
						cw = !cw; // Change the direction because of negative
					}
					if (dx > 100){
 8d2:	91 05       	cpc	r25, r1
 8d4:	24 f0       	brlt	.+8      	; 0x8de <main+0x10c>
 8d6:	81 e0       	ldi	r24, 0x01	; 1
						cw = !cw; // Change the direction, it's faster to go the other way
 8d8:	61 11       	cpse	r22, r1
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	68 2f       	mov	r22, r24
					}
					rotate( 1, cw /*1 for cw, 0 for ccw*/); // rotate the stepper one step in proper direction
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	66 de       	rcall	.-820    	; 0x5b0 <rotate>
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <main+0x11c>
					// TODO: Possibly use Timer2 and the "stepperPauseTime" to accelerate/decelerate. ****
				}
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
 8e6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagRampDown>
 8ea:	81 11       	cpse	r24, r1
 8ec:	4c c0       	rjmp	.+152    	; 0x986 <main+0x1b4>
			displaySorted(&head, &tail); // Display info on LCD
			return 0; // Program end
		}
		
		// Check if we need to pause
		if (flagPause){ // "Pause" routine
 8ee:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
 8f2:	88 23       	and	r24, r24
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <main+0x126>
 8f6:	92 cf       	rjmp	.-220    	; 0x81c <main+0x4a>
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 8f8:	15 b8       	out	0x05, r1	; 5
		}
		
		// Check if we need to pause
		if (flagPause){ // "Pause" routine
			updateDCMotorState(0); // Stop DC motor
			LCDClear();
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	05 dc       	rcall	.-2038   	; 0x10a <LCDByte>
 900:	60 e0       	ldi	r22, 0x00	; 0
			LCDHome();
 902:	82 e0       	ldi	r24, 0x02	; 2
 904:	02 dc       	rcall	.-2044   	; 0x10a <LCDByte>
 906:	8e e6       	ldi	r24, 0x6E	; 110
 908:	91 e0       	ldi	r25, 0x01	; 1
			LCDWriteString("Paused");
 90a:	3f dc       	rcall	.-1922   	; 0x18a <LCDWriteString>
 90c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 910:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
			
			if(stepperPos != stepperDestination){ // Let stepper finish rotating
 914:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 918:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 91c:	28 17       	cp	r18, r24
 91e:	39 07       	cpc	r19, r25
 920:	e9 f0       	breq	.+58     	; 0x95c <main+0x18a>
 922:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 926:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
				char cw = 1; // Clockwise 1, ccw if 0.
				int dx = stepperDestination-stepperPos;
 92a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 92e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 932:	82 1b       	sub	r24, r18
 934:	93 0b       	sbc	r25, r19
 936:	2a f4       	brpl	.+10     	; 0x942 <main+0x170>
 938:	91 95       	neg	r25
				if (dx<0){
 93a:	81 95       	neg	r24
					dx = -dx;
 93c:	91 09       	sbc	r25, r1
 93e:	60 e0       	ldi	r22, 0x00	; 0
					cw = !cw;
 940:	01 c0       	rjmp	.+2      	; 0x944 <main+0x172>
 942:	61 e0       	ldi	r22, 0x01	; 1
			LCDClear();
			LCDHome();
			LCDWriteString("Paused");
			
			if(stepperPos != stepperDestination){ // Let stepper finish rotating
				char cw = 1; // Clockwise 1, ccw if 0.
 944:	85 36       	cpi	r24, 0x65	; 101
				int dx = stepperDestination-stepperPos;
				if (dx<0){
					dx = -dx;
					cw = !cw;
				}
				if (dx > 100){
 946:	91 05       	cpc	r25, r1
 948:	44 f0       	brlt	.+16     	; 0x95a <main+0x188>
					dx = 200 - dx;
 94a:	98 01       	movw	r18, r16
 94c:	28 1b       	sub	r18, r24
 94e:	39 0b       	sbc	r19, r25
					cw = !cw;
 950:	c9 01       	movw	r24, r18
 952:	21 e0       	ldi	r18, 0x01	; 1
 954:	61 11       	cpse	r22, r1
				}
				rotate( dx, cw /*1 for cw, 0 for ccw*/); // Finish rotating to proper position
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	62 2f       	mov	r22, r18
			}
			
			displaySorted(&head, &tail); // Display info on LCD
 95a:	2a de       	rcall	.-940    	; 0x5b0 <rotate>
 95c:	64 ea       	ldi	r22, 0xA4	; 164
 95e:	71 e0       	ldi	r23, 0x01	; 1
 960:	86 ea       	ldi	r24, 0xA6	; 166
			
			while(flagPause){
 962:	91 e0       	ldi	r25, 0x01	; 1
 964:	91 dd       	rcall	.-1246   	; 0x488 <displaySorted>
 966:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <flagPause>
				// Wait for pause/unpause button to be toggled off
			} 
			LCDClear();
 96a:	81 11       	cpse	r24, r1
 96c:	fc cf       	rjmp	.-8      	; 0x966 <main+0x194>
 96e:	60 e0       	ldi	r22, 0x00	; 0
			LCDHome();
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	cb db       	rcall	.-2154   	; 0x10a <LCDByte>
 974:	60 e0       	ldi	r22, 0x00	; 0
			LCDWriteString("Unpaused");
 976:	82 e0       	ldi	r24, 0x02	; 2
 978:	c8 db       	rcall	.-2160   	; 0x10a <LCDByte>
 97a:	85 e7       	ldi	r24, 0x75	; 117
 97c:	91 e0       	ldi	r25, 0x01	; 1
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 97e:	05 dc       	rcall	.-2038   	; 0x18a <LCDWriteString>
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	85 b9       	out	0x05, r24	; 5
					rotate( 1, cw /*1 for cw, 0 for ccw*/); // rotate the stepper one step in proper direction
					// TODO: Possibly use Timer2 and the "stepperPauseTime" to accelerate/decelerate. ****
				}
			}
		}else if(flagRampDown) { // If queue is empty, check if we are in ramp down mode
			LCDClear();
 984:	4b cf       	rjmp	.-362    	; 0x81c <main+0x4a>
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	bf db       	rcall	.-2178   	; 0x10a <LCDByte>
			LCDHome();
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	bc db       	rcall	.-2184   	; 0x10a <LCDByte>
 992:	81 e6       	ldi	r24, 0x61	; 97
			LCDWriteString("Ramping down");
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	f9 db       	rcall	.-2062   	; 0x18a <LCDWriteString>
 998:	88 ec       	ldi	r24, 0xC8	; 200
 99a:	90 e0       	ldi	r25, 0x00	; 0
			
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
 99c:	55 dd       	rcall	.-1366   	; 0x448 <mTimer>
 99e:	15 b8       	out	0x05, r1	; 5
 9a0:	f8 94       	cli
 9a2:	64 ea       	ldi	r22, 0xA4	; 164
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 9a4:	71 e0       	ldi	r23, 0x01	; 1
			LCDHome();
			LCDWriteString("Ramping down");
			
			mTimer(200); // Give time for last item to make it off of conveyor and into its bucket
			updateDCMotorState(0); // Stop conveyor motor
			cli(); // Stop all interrupts
 9a6:	86 ea       	ldi	r24, 0xA6	; 166
			
			displaySorted(&head, &tail); // Display info on LCD
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	6e dd       	rcall	.-1316   	; 0x488 <displaySorted>
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0f 90       	pop	r0
 9b2:	0f 90       	pop	r0
			LCDHome();
			LCDWriteString("Unpaused");
			updateDCMotorState(1);
		}
	}
} // main()
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	ff 90       	pop	r15
 9be:	ef 90       	pop	r14
 9c0:	08 95       	ret

000009c2 <__vector_1>:
 9c2:	1f 92       	push	r1
 9c4:	0f 92       	push	r0
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	0f 92       	push	r0
}


// INTERRUPTS

ISR(INT0_vect){ // EX sensor
 9ca:	11 24       	eor	r1, r1
 9cc:	0b b6       	in	r0, 0x3b	; 59
 9ce:	0f 92       	push	r0
 9d0:	2f 93       	push	r18
 9d2:	3f 93       	push	r19
 9d4:	4f 93       	push	r20
 9d6:	5f 93       	push	r21
 9d8:	6f 93       	push	r22
 9da:	7f 93       	push	r23
 9dc:	8f 93       	push	r24
 9de:	9f 93       	push	r25
 9e0:	af 93       	push	r26
 9e2:	bf 93       	push	r27
 9e4:	ef 93       	push	r30
 9e6:	ff 93       	push	r31
	stepperDestination = firstValue(&head).value;
 9e8:	86 ea       	ldi	r24, 0xA6	; 166
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	8a dc       	rcall	.-1772   	; 0x302 <firstValue>
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <stepperDestination+0x1>
 9f4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <stepperDestination>
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
 9f8:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 9fc:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 a00:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 a04:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 a08:	28 17       	cp	r18, r24
 a0a:	39 07       	cpc	r19, r25
 a0c:	19 f1       	breq	.+70     	; 0xa54 <__vector_1+0x92>
void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
	} else if(state == 0){
		PORTB = 0x00; // Turn on the DC motor brake
 a0e:	15 b8       	out	0x05, r1	; 5

ISR(INT0_vect){ // EX sensor
	stepperDestination = firstValue(&head).value;
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
		updateDCMotorState(0); // Stop conveyor while we wait for the stepper to rotate to the correct position.
		flagConveyorStopped = 1; // Let other parts of program know we are stopped
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
		char cw = 1; // Clockwise 1, ccw if 0.
		int dx = stepperDestination-stepperPos;
 a16:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 a1a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 a1e:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <stepperPos>
 a22:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <stepperPos+0x1>
 a26:	82 1b       	sub	r24, r18
 a28:	93 0b       	sbc	r25, r19
		if (dx<0){
 a2a:	2a f4       	brpl	.+10     	; 0xa36 <__vector_1+0x74>
			dx = -dx;
 a2c:	91 95       	neg	r25
 a2e:	81 95       	neg	r24
 a30:	91 09       	sbc	r25, r1
			cw = !cw;
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <__vector_1+0x76>
ISR(INT0_vect){ // EX sensor
	stepperDestination = firstValue(&head).value;
	if(stepperPos != stepperDestination){ // Stepper still needs time to get to destination
		updateDCMotorState(0); // Stop conveyor while we wait for the stepper to rotate to the correct position.
		flagConveyorStopped = 1; // Let other parts of program know we are stopped
		char cw = 1; // Clockwise 1, ccw if 0.
 a36:	61 e0       	ldi	r22, 0x01	; 1
		int dx = stepperDestination-stepperPos;
		if (dx<0){
			dx = -dx;
			cw = !cw;
		}
		if (dx > 100){
 a38:	85 36       	cpi	r24, 0x65	; 101
 a3a:	91 05       	cpc	r25, r1
 a3c:	54 f0       	brlt	.+20     	; 0xa52 <__vector_1+0x90>
			dx = 200 - dx;
 a3e:	28 ec       	ldi	r18, 0xC8	; 200
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	a9 01       	movw	r20, r18
 a44:	48 1b       	sub	r20, r24
 a46:	59 0b       	sbc	r21, r25
 a48:	ca 01       	movw	r24, r20
			cw = !cw;
 a4a:	21 e0       	ldi	r18, 0x01	; 1
 a4c:	61 11       	cpse	r22, r1
 a4e:	20 e0       	ldi	r18, 0x00	; 0
		}
		rotate( dx, cw /*1 for cw, 0 for ccw*/); // rotate to proper position
 a50:	62 2f       	mov	r22, r18
 a52:	ae dd       	rcall	.-1188   	; 0x5b0 <rotate>
		// TODO: Add "width" around each stepper destination for faster bucket dropping ****
	}
	
	// We are now guaranteed to be at the correct position
	dequeue(&head,&tail,&deQueuedLink); // pop item out of queue
 a54:	4a ea       	ldi	r20, 0xAA	; 170
 a56:	51 e0       	ldi	r21, 0x01	; 1
 a58:	64 ea       	ldi	r22, 0xA4	; 164
 a5a:	71 e0       	ldi	r23, 0x01	; 1
 a5c:	86 ea       	ldi	r24, 0xA6	; 166
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	3a dc       	rcall	.-1932   	; 0x2d6 <dequeue>
	free(deQueuedLink); // Not sure if this will cause errors, may need to re-allocate deQueuedLink next loop?
 a62:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <deQueuedLink>
 a66:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <deQueuedLink+0x1>
 a6a:	7e d1       	rcall	.+764    	; 0xd68 <free>
	itemsSorted++;
 a6c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <itemsSorted>
 a70:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <itemsSorted+0x1>
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <itemsSorted+0x1>
 a7a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <itemsSorted>
	countSorted(stepperDestination); // count the type of item sorted
 a7e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stepperDestination>
 a82:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stepperDestination+0x1>
 a86:	aa dc       	rcall	.-1708   	; 0x3dc <countSorted>
	
	if(flagConveyorStopped){
 a88:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
 a8c:	88 23       	and	r24, r24
 a8e:	21 f0       	breq	.+8      	; 0xa98 <__vector_1+0xd6>
} // setDCMotorSpeed()

void updateDCMotorState(char state){
	// B0-B4 are IB, IA, EB, EA. Note: EB and EA are always "on" (active low).
	if(state == 1){
		PORTB = 0x02; // Go forward - IB & EA & EB (active low inputs)
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	85 b9       	out	0x05, r24	; 5
	itemsSorted++;
	countSorted(stepperDestination); // count the type of item sorted
	
	if(flagConveyorStopped){
		updateDCMotorState(1); // restart conveyor motor
		flagConveyorStopped = 0; // reset flag
 a94:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
	}
}
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0b be       	out	0x3b, r0	; 59
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <__vector_2>:

ISR(INT1_vect){ // OR sensor
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	0b b6       	in	r0, 0x3b	; 59
 aca:	0f 92       	push	r0
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	ef 93       	push	r30
 ad2:	ff 93       	push	r31
	flagProcessing = 1; // Lets us know that we currently are trying to identify an object
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <flagProcessing>
	ADC_result = 0x400; // Reset value to highest number (10-bit ADC, so max value of ADC is 0x3FF)
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	94 e0       	ldi	r25, 0x04	; 4
 ade:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ADC_result+0x1>
 ae2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ADC_result>
	ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 ae6:	ea e7       	ldi	r30, 0x7A	; 122
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	80 64       	ori	r24, 0x40	; 64
 aee:	80 83       	st	Z, r24
}
 af0:	ff 91       	pop	r31
 af2:	ef 91       	pop	r30
 af4:	9f 91       	pop	r25
 af6:	8f 91       	pop	r24
 af8:	0f 90       	pop	r0
 afa:	0b be       	out	0x3b, r0	; 59
 afc:	0f 90       	pop	r0
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	0f 90       	pop	r0
 b02:	1f 90       	pop	r1
 b04:	18 95       	reti

00000b06 <__vector_4>:
/* NOTE: no interrupt for HE
ISR(INT2_vect){ // HE sensor
	flagHE = 1;
}*/

ISR(INT3_vect){ // Left button pressed
 b06:	1f 92       	push	r1
 b08:	0f 92       	push	r0
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	0f 92       	push	r0
 b0e:	11 24       	eor	r1, r1
 b10:	8f 93       	push	r24
 b12:	9f 93       	push	r25
	flagPause = !flagPause;
 b14:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <flagPause>
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	91 11       	cpse	r25, r1
 b1c:	80 e0       	ldi	r24, 0x00	; 0
 b1e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <flagPause>
}
 b22:	9f 91       	pop	r25
 b24:	8f 91       	pop	r24
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <__vector_5>:

ISR(INT4_vect){ // Right button pressed
 b30:	1f 92       	push	r1
 b32:	0f 92       	push	r0
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	0f 92       	push	r0
 b38:	11 24       	eor	r1, r1
 b3a:	8f 93       	push	r24
	flagRampDown = 1;
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <flagRampDown>
}
 b42:	8f 91       	pop	r24
 b44:	0f 90       	pop	r0
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	0f 90       	pop	r0
 b4a:	1f 90       	pop	r1
 b4c:	18 95       	reti

00000b4e <__vector_29>:

ISR(ADC_vect){ // Analog to Digital conversion
 b4e:	1f 92       	push	r1
 b50:	0f 92       	push	r0
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	0f 92       	push	r0
 b56:	11 24       	eor	r1, r1
 b58:	0b b6       	in	r0, 0x3b	; 59
 b5a:	0f 92       	push	r0
 b5c:	2f 93       	push	r18
 b5e:	3f 93       	push	r19
 b60:	8f 93       	push	r24
 b62:	9f 93       	push	r25
 b64:	ef 93       	push	r30
 b66:	ff 93       	push	r31
	new_ADC_result = ADC;
 b68:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 b6c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 b70:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <new_ADC_result+0x1>
 b74:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <new_ADC_result>
	if(new_ADC_result < ADC_result){ // Want lowest value for highest reflectivity
 b78:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <new_ADC_result>
 b7c:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <new_ADC_result+0x1>
 b80:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ADC_result>
 b84:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ADC_result+0x1>
 b88:	28 17       	cp	r18, r24
 b8a:	39 07       	cpc	r19, r25
 b8c:	40 f4       	brcc	.+16     	; 0xb9e <__vector_29+0x50>
		ADC_result = new_ADC_result; // store ADC converted value to ADC_result 
 b8e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <new_ADC_result>
 b92:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <new_ADC_result+0x1>
 b96:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ADC_result+0x1>
 b9a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ADC_result>
	}
	// Check OR==high? (optical sensor #1) (Pin D1)
	if((PIND & 0x02)==0x02){
 b9e:	49 9b       	sbis	0x09, 1	; 9
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <__vector_29+0x5e>
		ADCSRA |= _BV(ADSC); // Triggers new ADC conversion
 ba2:	ea e7       	ldi	r30, 0x7A	; 122
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	80 64       	ori	r24, 0x40	; 64
 baa:	80 83       	st	Z, r24
	}
}
 bac:	ff 91       	pop	r31
 bae:	ef 91       	pop	r30
 bb0:	9f 91       	pop	r25
 bb2:	8f 91       	pop	r24
 bb4:	3f 91       	pop	r19
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	0b be       	out	0x3b, r0	; 59
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <__vector_default>:

ISR(BADISR_vect){ // Bad ISR catch statement
 bc6:	1f 92       	push	r1
 bc8:	0f 92       	push	r0
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	0f 92       	push	r0
 bce:	11 24       	eor	r1, r1
	LCDClear();
 bd0:	60 e0       	ldi	r22, 0x00	; 0
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	9a da       	rcall	.-2764   	; 0x10a <LCDByte>
	LCDHome();
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	82 e0       	ldi	r24, 0x02	; 2
 bda:	97 da       	rcall	.-2770   	; 0x10a <LCDByte>
	LCDWriteStringXY(1,1,"BAD ISR");
 bdc:	61 e0       	ldi	r22, 0x01	; 1
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	3f db       	rcall	.-2434   	; 0x260 <LCDGotoXY>
 be2:	8e e7       	ldi	r24, 0x7E	; 126
 be4:	91 e0       	ldi	r25, 0x01	; 1
 be6:	d1 da       	rcall	.-2654   	; 0x18a <LCDWriteString>
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__vector_default+0x22>

00000bea <__divmodhi4>:
 bea:	97 fb       	bst	r25, 7
 bec:	07 2e       	mov	r0, r23
 bee:	16 f4       	brtc	.+4      	; 0xbf4 <__divmodhi4+0xa>
 bf0:	00 94       	com	r0
 bf2:	06 d0       	rcall	.+12     	; 0xc00 <__divmodhi4_neg1>
 bf4:	77 fd       	sbrc	r23, 7
 bf6:	08 d0       	rcall	.+16     	; 0xc08 <__divmodhi4_neg2>
 bf8:	0b d0       	rcall	.+22     	; 0xc10 <__udivmodhi4>
 bfa:	07 fc       	sbrc	r0, 7
 bfc:	05 d0       	rcall	.+10     	; 0xc08 <__divmodhi4_neg2>
 bfe:	3e f4       	brtc	.+14     	; 0xc0e <__divmodhi4_exit>

00000c00 <__divmodhi4_neg1>:
 c00:	90 95       	com	r25
 c02:	81 95       	neg	r24
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <__divmodhi4_neg2>:
 c08:	70 95       	com	r23
 c0a:	61 95       	neg	r22
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c0e <__divmodhi4_exit>:
 c0e:	08 95       	ret

00000c10 <__udivmodhi4>:
 c10:	aa 1b       	sub	r26, r26
 c12:	bb 1b       	sub	r27, r27
 c14:	51 e1       	ldi	r21, 0x11	; 17
 c16:	07 c0       	rjmp	.+14     	; 0xc26 <__udivmodhi4_ep>

00000c18 <__udivmodhi4_loop>:
 c18:	aa 1f       	adc	r26, r26
 c1a:	bb 1f       	adc	r27, r27
 c1c:	a6 17       	cp	r26, r22
 c1e:	b7 07       	cpc	r27, r23
 c20:	10 f0       	brcs	.+4      	; 0xc26 <__udivmodhi4_ep>
 c22:	a6 1b       	sub	r26, r22
 c24:	b7 0b       	sbc	r27, r23

00000c26 <__udivmodhi4_ep>:
 c26:	88 1f       	adc	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	5a 95       	dec	r21
 c2c:	a9 f7       	brne	.-22     	; 0xc18 <__udivmodhi4_loop>
 c2e:	80 95       	com	r24
 c30:	90 95       	com	r25
 c32:	bc 01       	movw	r22, r24
 c34:	cd 01       	movw	r24, r26
 c36:	08 95       	ret

00000c38 <malloc>:
 c38:	0f 93       	push	r16
 c3a:	1f 93       	push	r17
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	82 30       	cpi	r24, 0x02	; 2
 c42:	91 05       	cpc	r25, r1
 c44:	10 f4       	brcc	.+4      	; 0xc4a <malloc+0x12>
 c46:	82 e0       	ldi	r24, 0x02	; 2
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__flp>
 c4e:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <__flp+0x1>
 c52:	20 e0       	ldi	r18, 0x00	; 0
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	a0 e0       	ldi	r26, 0x00	; 0
 c58:	b0 e0       	ldi	r27, 0x00	; 0
 c5a:	30 97       	sbiw	r30, 0x00	; 0
 c5c:	19 f1       	breq	.+70     	; 0xca4 <malloc+0x6c>
 c5e:	40 81       	ld	r20, Z
 c60:	51 81       	ldd	r21, Z+1	; 0x01
 c62:	02 81       	ldd	r16, Z+2	; 0x02
 c64:	13 81       	ldd	r17, Z+3	; 0x03
 c66:	48 17       	cp	r20, r24
 c68:	59 07       	cpc	r21, r25
 c6a:	c8 f0       	brcs	.+50     	; 0xc9e <malloc+0x66>
 c6c:	84 17       	cp	r24, r20
 c6e:	95 07       	cpc	r25, r21
 c70:	69 f4       	brne	.+26     	; 0xc8c <malloc+0x54>
 c72:	10 97       	sbiw	r26, 0x00	; 0
 c74:	31 f0       	breq	.+12     	; 0xc82 <malloc+0x4a>
 c76:	12 96       	adiw	r26, 0x02	; 2
 c78:	0c 93       	st	X, r16
 c7a:	12 97       	sbiw	r26, 0x02	; 2
 c7c:	13 96       	adiw	r26, 0x03	; 3
 c7e:	1c 93       	st	X, r17
 c80:	27 c0       	rjmp	.+78     	; 0xcd0 <malloc+0x98>
 c82:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <__flp>
 c86:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <__flp+0x1>
 c8a:	22 c0       	rjmp	.+68     	; 0xcd0 <malloc+0x98>
 c8c:	21 15       	cp	r18, r1
 c8e:	31 05       	cpc	r19, r1
 c90:	19 f0       	breq	.+6      	; 0xc98 <malloc+0x60>
 c92:	42 17       	cp	r20, r18
 c94:	53 07       	cpc	r21, r19
 c96:	18 f4       	brcc	.+6      	; 0xc9e <malloc+0x66>
 c98:	9a 01       	movw	r18, r20
 c9a:	bd 01       	movw	r22, r26
 c9c:	ef 01       	movw	r28, r30
 c9e:	df 01       	movw	r26, r30
 ca0:	f8 01       	movw	r30, r16
 ca2:	db cf       	rjmp	.-74     	; 0xc5a <malloc+0x22>
 ca4:	21 15       	cp	r18, r1
 ca6:	31 05       	cpc	r19, r1
 ca8:	f9 f0       	breq	.+62     	; 0xce8 <malloc+0xb0>
 caa:	28 1b       	sub	r18, r24
 cac:	39 0b       	sbc	r19, r25
 cae:	24 30       	cpi	r18, 0x04	; 4
 cb0:	31 05       	cpc	r19, r1
 cb2:	80 f4       	brcc	.+32     	; 0xcd4 <malloc+0x9c>
 cb4:	8a 81       	ldd	r24, Y+2	; 0x02
 cb6:	9b 81       	ldd	r25, Y+3	; 0x03
 cb8:	61 15       	cp	r22, r1
 cba:	71 05       	cpc	r23, r1
 cbc:	21 f0       	breq	.+8      	; 0xcc6 <malloc+0x8e>
 cbe:	fb 01       	movw	r30, r22
 cc0:	93 83       	std	Z+3, r25	; 0x03
 cc2:	82 83       	std	Z+2, r24	; 0x02
 cc4:	04 c0       	rjmp	.+8      	; 0xcce <malloc+0x96>
 cc6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__flp+0x1>
 cca:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__flp>
 cce:	fe 01       	movw	r30, r28
 cd0:	32 96       	adiw	r30, 0x02	; 2
 cd2:	44 c0       	rjmp	.+136    	; 0xd5c <malloc+0x124>
 cd4:	fe 01       	movw	r30, r28
 cd6:	e2 0f       	add	r30, r18
 cd8:	f3 1f       	adc	r31, r19
 cda:	81 93       	st	Z+, r24
 cdc:	91 93       	st	Z+, r25
 cde:	22 50       	subi	r18, 0x02	; 2
 ce0:	31 09       	sbc	r19, r1
 ce2:	39 83       	std	Y+1, r19	; 0x01
 ce4:	28 83       	st	Y, r18
 ce6:	3a c0       	rjmp	.+116    	; 0xd5c <malloc+0x124>
 ce8:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 cec:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 cf0:	23 2b       	or	r18, r19
 cf2:	41 f4       	brne	.+16     	; 0xd04 <malloc+0xcc>
 cf4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 cf8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 cfc:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <__brkval+0x1>
 d00:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <__brkval>
 d04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d08:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d0c:	21 15       	cp	r18, r1
 d0e:	31 05       	cpc	r19, r1
 d10:	41 f4       	brne	.+16     	; 0xd22 <malloc+0xea>
 d12:	2d b7       	in	r18, 0x3d	; 61
 d14:	3e b7       	in	r19, 0x3e	; 62
 d16:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d1a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d1e:	24 1b       	sub	r18, r20
 d20:	35 0b       	sbc	r19, r21
 d22:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__brkval>
 d26:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <__brkval+0x1>
 d2a:	e2 17       	cp	r30, r18
 d2c:	f3 07       	cpc	r31, r19
 d2e:	a0 f4       	brcc	.+40     	; 0xd58 <malloc+0x120>
 d30:	2e 1b       	sub	r18, r30
 d32:	3f 0b       	sbc	r19, r31
 d34:	28 17       	cp	r18, r24
 d36:	39 07       	cpc	r19, r25
 d38:	78 f0       	brcs	.+30     	; 0xd58 <malloc+0x120>
 d3a:	ac 01       	movw	r20, r24
 d3c:	4e 5f       	subi	r20, 0xFE	; 254
 d3e:	5f 4f       	sbci	r21, 0xFF	; 255
 d40:	24 17       	cp	r18, r20
 d42:	35 07       	cpc	r19, r21
 d44:	48 f0       	brcs	.+18     	; 0xd58 <malloc+0x120>
 d46:	4e 0f       	add	r20, r30
 d48:	5f 1f       	adc	r21, r31
 d4a:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__brkval+0x1>
 d4e:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__brkval>
 d52:	81 93       	st	Z+, r24
 d54:	91 93       	st	Z+, r25
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <malloc+0x124>
 d58:	e0 e0       	ldi	r30, 0x00	; 0
 d5a:	f0 e0       	ldi	r31, 0x00	; 0
 d5c:	cf 01       	movw	r24, r30
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	1f 91       	pop	r17
 d64:	0f 91       	pop	r16
 d66:	08 95       	ret

00000d68 <free>:
 d68:	cf 93       	push	r28
 d6a:	df 93       	push	r29
 d6c:	00 97       	sbiw	r24, 0x00	; 0
 d6e:	09 f4       	brne	.+2      	; 0xd72 <free+0xa>
 d70:	81 c0       	rjmp	.+258    	; 0xe74 <free+0x10c>
 d72:	fc 01       	movw	r30, r24
 d74:	32 97       	sbiw	r30, 0x02	; 2
 d76:	13 82       	std	Z+3, r1	; 0x03
 d78:	12 82       	std	Z+2, r1	; 0x02
 d7a:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <__flp>
 d7e:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <__flp+0x1>
 d82:	10 97       	sbiw	r26, 0x00	; 0
 d84:	81 f4       	brne	.+32     	; 0xda6 <free+0x3e>
 d86:	20 81       	ld	r18, Z
 d88:	31 81       	ldd	r19, Z+1	; 0x01
 d8a:	82 0f       	add	r24, r18
 d8c:	93 1f       	adc	r25, r19
 d8e:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 d92:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 d96:	28 17       	cp	r18, r24
 d98:	39 07       	cpc	r19, r25
 d9a:	51 f5       	brne	.+84     	; 0xdf0 <free+0x88>
 d9c:	f0 93 ad 01 	sts	0x01AD, r31	; 0x8001ad <__brkval+0x1>
 da0:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <__brkval>
 da4:	67 c0       	rjmp	.+206    	; 0xe74 <free+0x10c>
 da6:	ed 01       	movw	r28, r26
 da8:	20 e0       	ldi	r18, 0x00	; 0
 daa:	30 e0       	ldi	r19, 0x00	; 0
 dac:	ce 17       	cp	r28, r30
 dae:	df 07       	cpc	r29, r31
 db0:	40 f4       	brcc	.+16     	; 0xdc2 <free+0x5a>
 db2:	4a 81       	ldd	r20, Y+2	; 0x02
 db4:	5b 81       	ldd	r21, Y+3	; 0x03
 db6:	9e 01       	movw	r18, r28
 db8:	41 15       	cp	r20, r1
 dba:	51 05       	cpc	r21, r1
 dbc:	f1 f0       	breq	.+60     	; 0xdfa <free+0x92>
 dbe:	ea 01       	movw	r28, r20
 dc0:	f5 cf       	rjmp	.-22     	; 0xdac <free+0x44>
 dc2:	d3 83       	std	Z+3, r29	; 0x03
 dc4:	c2 83       	std	Z+2, r28	; 0x02
 dc6:	40 81       	ld	r20, Z
 dc8:	51 81       	ldd	r21, Z+1	; 0x01
 dca:	84 0f       	add	r24, r20
 dcc:	95 1f       	adc	r25, r21
 dce:	c8 17       	cp	r28, r24
 dd0:	d9 07       	cpc	r29, r25
 dd2:	59 f4       	brne	.+22     	; 0xdea <free+0x82>
 dd4:	88 81       	ld	r24, Y
 dd6:	99 81       	ldd	r25, Y+1	; 0x01
 dd8:	84 0f       	add	r24, r20
 dda:	95 1f       	adc	r25, r21
 ddc:	02 96       	adiw	r24, 0x02	; 2
 dde:	91 83       	std	Z+1, r25	; 0x01
 de0:	80 83       	st	Z, r24
 de2:	8a 81       	ldd	r24, Y+2	; 0x02
 de4:	9b 81       	ldd	r25, Y+3	; 0x03
 de6:	93 83       	std	Z+3, r25	; 0x03
 de8:	82 83       	std	Z+2, r24	; 0x02
 dea:	21 15       	cp	r18, r1
 dec:	31 05       	cpc	r19, r1
 dee:	29 f4       	brne	.+10     	; 0xdfa <free+0x92>
 df0:	f0 93 af 01 	sts	0x01AF, r31	; 0x8001af <__flp+0x1>
 df4:	e0 93 ae 01 	sts	0x01AE, r30	; 0x8001ae <__flp>
 df8:	3d c0       	rjmp	.+122    	; 0xe74 <free+0x10c>
 dfa:	e9 01       	movw	r28, r18
 dfc:	fb 83       	std	Y+3, r31	; 0x03
 dfe:	ea 83       	std	Y+2, r30	; 0x02
 e00:	49 91       	ld	r20, Y+
 e02:	59 91       	ld	r21, Y+
 e04:	c4 0f       	add	r28, r20
 e06:	d5 1f       	adc	r29, r21
 e08:	ec 17       	cp	r30, r28
 e0a:	fd 07       	cpc	r31, r29
 e0c:	61 f4       	brne	.+24     	; 0xe26 <free+0xbe>
 e0e:	80 81       	ld	r24, Z
 e10:	91 81       	ldd	r25, Z+1	; 0x01
 e12:	84 0f       	add	r24, r20
 e14:	95 1f       	adc	r25, r21
 e16:	02 96       	adiw	r24, 0x02	; 2
 e18:	e9 01       	movw	r28, r18
 e1a:	99 83       	std	Y+1, r25	; 0x01
 e1c:	88 83       	st	Y, r24
 e1e:	82 81       	ldd	r24, Z+2	; 0x02
 e20:	93 81       	ldd	r25, Z+3	; 0x03
 e22:	9b 83       	std	Y+3, r25	; 0x03
 e24:	8a 83       	std	Y+2, r24	; 0x02
 e26:	e0 e0       	ldi	r30, 0x00	; 0
 e28:	f0 e0       	ldi	r31, 0x00	; 0
 e2a:	12 96       	adiw	r26, 0x02	; 2
 e2c:	8d 91       	ld	r24, X+
 e2e:	9c 91       	ld	r25, X
 e30:	13 97       	sbiw	r26, 0x03	; 3
 e32:	00 97       	sbiw	r24, 0x00	; 0
 e34:	19 f0       	breq	.+6      	; 0xe3c <free+0xd4>
 e36:	fd 01       	movw	r30, r26
 e38:	dc 01       	movw	r26, r24
 e3a:	f7 cf       	rjmp	.-18     	; 0xe2a <free+0xc2>
 e3c:	8d 91       	ld	r24, X+
 e3e:	9c 91       	ld	r25, X
 e40:	11 97       	sbiw	r26, 0x01	; 1
 e42:	9d 01       	movw	r18, r26
 e44:	2e 5f       	subi	r18, 0xFE	; 254
 e46:	3f 4f       	sbci	r19, 0xFF	; 255
 e48:	82 0f       	add	r24, r18
 e4a:	93 1f       	adc	r25, r19
 e4c:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
 e50:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
 e54:	28 17       	cp	r18, r24
 e56:	39 07       	cpc	r19, r25
 e58:	69 f4       	brne	.+26     	; 0xe74 <free+0x10c>
 e5a:	30 97       	sbiw	r30, 0x00	; 0
 e5c:	29 f4       	brne	.+10     	; 0xe68 <free+0x100>
 e5e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <__flp+0x1>
 e62:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__flp>
 e66:	02 c0       	rjmp	.+4      	; 0xe6c <free+0x104>
 e68:	13 82       	std	Z+3, r1	; 0x03
 e6a:	12 82       	std	Z+2, r1	; 0x02
 e6c:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <__brkval+0x1>
 e70:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <__brkval>
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	08 95       	ret

00000e7a <_exit>:
 e7a:	f8 94       	cli

00000e7c <__stop_program>:
 e7c:	ff cf       	rjmp	.-2      	; 0xe7c <__stop_program>
